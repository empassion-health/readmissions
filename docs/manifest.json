{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.1", "generated_at": "2022-12-06T15:22:36.383252Z", "invocation_id": "779655c6-021f-4c8a-9c5d-ecd739c28aa3", "env": {}, "project_id": "361fb8d7de0427b33a46a9973e88599f", "user_id": "7acd446d-f397-41c9-9f69-07656e135a86", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.readmissions_input.condition": {"raw_sql": "select encounter_id, CODE, DIAGNOSIS_RANK, code_type, condition_type\r\nfrom tuva.core.condition", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "readmissions_input", "database": "tuva", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions_input", "fqn": ["readmissions_input", "condition"], "unique_id": "model.readmissions_input.condition", "package_name": "readmissions_input", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate", "path": "condition.sql", "original_file_path": "models\\condition.sql", "name": "condition", "alias": "condition", "checksum": {"name": "sha256", "checksum": "e25c8b29a87053df935045eed0029864d584d671ebb744bbe51522942ab8263a"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "The readmissions package uses the condition output from claims_preprocessing as an input.   If claims preprocessing is bypassed and a custom condition model is used, this model represents the minimum required data elements needed for readmissions to function.\n", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "code": {"name": "code", "description": "An ICD-10-CM diagnosis code associated with this encounter_id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "code_type": {"name": "code_type", "description": "The type of condition code.  Readmissions will only function with ICD-10-CM codes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_rank": {"name": "diagnosis_rank", "description": "A positive integer giving the diagnosis ranking for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_type": {"name": "condition_type", "description": "The type of reported condition.  Readmissions will only evaluate conditions with a type of discharge diagnosis", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions_input://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions_input\\models\\condition.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1670340076.1561127, "compiled_sql": "select encounter_id, CODE, DIAGNOSIS_RANK, code_type, condition_type\r\nfrom tuva.core.condition", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions_input.condition"}, "model.readmissions_input.encounter": {"raw_sql": "select encounter_id, PATIENT_ID,ENCOUNTER_START_DATE,ENCOUNTER_END_DATE,DISCHARGE_DISPOSITION_CODE\r\n     ,FACILITY_NPI,MS_DRG_CODE,ENCOUNTER_TYPE\r\nfrom tuva.core.encounter", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "readmissions_input", "database": "tuva", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions_input", "fqn": ["readmissions_input", "encounter"], "unique_id": "model.readmissions_input.encounter", "package_name": "readmissions_input", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate", "path": "encounter.sql", "original_file_path": "models\\encounter.sql", "name": "encounter", "alias": "encounter", "checksum": {"name": "sha256", "checksum": "61cd5b6994f0f7df7db0dd9f508972c8ffbd9d7eadd38b3ecb4b71fdb87d178c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "The readmissions package uses the encounter output from claims_preprocessing as an input.   If claims preprocessing is bypassed and a custom encounter model is used, this model represents the minimum required data elements needed for readmissions to function.\n", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique ID for each visit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique ID for each patient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "YYYY-MM-DD date format (inpatient admit date).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_end_date": {"name": "encounter_end_date", "description": "YYYY-MM-DD date format (inpatient discharge date).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_disposition_code": {"name": "discharge_disposition_code", "description": "Discharge disposition code for the inpatient admission.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "facility_npi": {"name": "facility_npi", "description": "The facility name for the inpatient encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ms_drg_code": {"name": "ms_drg_code", "description": "The MS-DRG associated with the acute inpatient encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_type": {"name": "encounter_type", "description": "Describes the kind of encounter this was.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions_input://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions_input\\models\\encounter.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1670340076.160208, "compiled_sql": "select encounter_id, PATIENT_ID,ENCOUNTER_START_DATE,ENCOUNTER_END_DATE,DISCHARGE_DISPOSITION_CODE\r\n     ,FACILITY_NPI,MS_DRG_CODE,ENCOUNTER_TYPE\r\nfrom tuva.core.encounter", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions_input.encounter"}, "model.readmissions_input.patient": {"raw_sql": "select  patient_id,\r\n         gender,\r\n         BIRTH_DATE\r\nfrom tuva.core.patient", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "readmissions_input", "database": "tuva", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions_input", "fqn": ["readmissions_input", "patient"], "unique_id": "model.readmissions_input.patient", "package_name": "readmissions_input", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate", "path": "patient.sql", "original_file_path": "models\\patient.sql", "name": "patient", "alias": "patient", "checksum": {"name": "sha256", "checksum": "2b62f93b0696ea6c8782d89b119ab72cd309e1442c2dc6def473242c3c914b1c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "The readmissions package uses the patient output from claims_preprocessing as an input.   If claims preprocessing is bypassed and a custom patient model is used, this model represents the minimum required data elements needed for readmissions to function.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for each patient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Gender of patient (male, female, or unknown)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "YYYY-MM-DD date format.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions_input://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions_input\\models\\patient.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1670340076.1634452, "compiled_sql": "select  patient_id,\r\n         gender,\r\n         BIRTH_DATE\r\nfrom tuva.core.patient", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions_input.patient"}, "model.readmissions_input.procedure": {"raw_sql": "select encounter_id, code, code_type\r\n     from  tuva.core.procedure", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "readmissions_input", "database": "tuva", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions_input", "fqn": ["readmissions_input", "procedure"], "unique_id": "model.readmissions_input.procedure", "package_name": "readmissions_input", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate", "path": "procedure.sql", "original_file_path": "models\\procedure.sql", "name": "procedure", "alias": "procedure", "checksum": {"name": "sha256", "checksum": "0db84fe7872bef3d5352e44bd88da1ecdc1bb2b495fa88bf59a1012bf1118771"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "The readmissions package uses the procedure output from claims_preprocessing as an input.   If claims preprocessing is bypassed and a custom procedure model is used, this model represents the minimum required data elements needed for readmissions to function.\n", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique ID for each visit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "code": {"name": "code", "description": "Procedure code for a procedure performed during inpatient encounter.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "code_type": {"name": "code_type", "description": "Indicates the type of procedure (cpt, icd-10-pcs)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions_input://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions_input\\models\\procedure.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1670340076.1634452, "compiled_sql": "select encounter_id, code, code_type\r\n     from  tuva.core.procedure", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions_input.procedure"}, "model.readmissions.readmissions__encounter_augmented": {"raw_sql": "-- Here we list all encounters from the stg_encounter model\r\n-- and we augment them with extra fields\r\n-- that are relevant for readmission measures\r\n\r\n\r\n{{ config(materialized='table'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n\r\nwith encounter_augmented as (\r\nselect\r\n    aa.encounter_id,\r\n    aa.patient_id,\r\n    aa.admit_date,\r\n    aa.discharge_date,\r\n    aa.discharge_disposition_code,\r\n    aa.facility_npi,\r\n    aa.ms_drg_code,\r\n    aa.discharge_date - aa.admit_date  as length_of_stay,\r\n    case\r\n        when bb.encounter_id is not null then 1\r\n\telse 0\r\n    end as index_admission_flag,\r\n    case\r\n        when cc.encounter_id is not null then 1\r\n\telse 0\r\n    end as planned_flag,\r\n    dd.specialty_cohort,\r\n    case\r\n        when aa.discharge_disposition_code = '20' then 1\r\n\telse 0\r\n    end as died_flag,\r\n    ee.diagnosis_ccs,\r\n    ee.disqualified_encounter_flag,\r\n    ee.missing_admit_date_flag,\r\n    ee.missing_discharge_date_flag,\r\n    ee.admit_after_discharge_flag,\r\n    ee.missing_discharge_disposition_code_flag,\r\n    ee.invalid_discharge_disposition_code_flag,\r\n    ee.missing_primary_diagnosis_flag,\r\n    ee.multiple_primary_diagnoses_flag,\r\n    ee.invalid_primary_diagnosis_code_flag,\r\n    ee.no_diagnosis_ccs_flag,\r\n    ee.overlaps_with_another_encounter_flag,\r\n    ee.missing_ms_drg_flag,\r\n    ee.invalid_ms_drg_flag\r\n    \r\nfrom\r\n    {{ ref('readmissions__stg_encounter') }} aa\r\n    left join {{ ref('readmissions__index_admission') }} bb\r\n    on aa.encounter_id = bb.encounter_id\r\n    left join {{ ref('readmissions__planned_encounter') }} cc\r\n    on aa.encounter_id = cc.encounter_id \r\n    left join {{ ref('readmissions__encounter_specialty_cohort') }} dd\r\n    on aa.encounter_id = dd.encounter_id\r\n    left join {{ ref('readmissions__encounter_data_quality') }} ee\r\n    on aa.encounter_id = ee.encounter_id\r\n)\r\n\r\n\r\n\r\nselect *\r\nfrom encounter_augmented", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__index_admission", "model.readmissions.readmissions__planned_encounter", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_data_quality"]}, "config": {"enabled": true, "alias": "encounter_augmented", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "readmissions__encounter_augmented"], "unique_id": "model.readmissions.readmissions__encounter_augmented", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "readmissions__encounter_augmented.sql", "original_file_path": "models\\readmissions__encounter_augmented.sql", "name": "readmissions__encounter_augmented", "alias": "encounter_augmented", "checksum": {"name": "sha256", "checksum": "74085ccf6796c82ae5ab266876612466df2950b9d45631a9a2d1871cc1b8882b"}, "tags": ["readmissions"], "refs": [["readmissions__stg_encounter"], ["readmissions__index_admission"], ["readmissions__planned_encounter"], ["readmissions__encounter_specialty_cohort"], ["readmissions__encounter_data_quality"]], "sources": [], "metrics": [], "description": "This model includes all encounters from the stg_encounter model, and for each encounter_id we add fields relevant for the encounter.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_date": {"name": "admit_date", "description": "The date of admission for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "The date of discharge for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_status_code": {"name": "discharge_status_code", "description": "The valid 2-digit discharge status for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "facility": {"name": "facility", "description": "A name or ID for the facility where the inpatient visit occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ms_drg": {"name": "ms_drg", "description": "The MS-DRG associted with the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "length_of_stay": {"name": "length_of_stay", "description": "Integer representing the length of stay of the inpatient visit in days", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index_admission_flag": {"name": "index_admission_flag", "description": "Flag to indicate if the encounter is an index admission", "meta": {}, "data_type": null, "quote": null, "tags": []}, "planned_flag": {"name": "planned_flag", "description": "Flag to indicate if the encounter was planned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specialty_cohort": {"name": "specialty_cohort", "description": "Specialty cohort the encounter belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "died_flag": {"name": "died_flag", "description": "Flag to indicate of the patient died in this encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_ccs": {"name": "diagnosis_ccs", "description": "CCS code associated with the primary diagnosis for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disqualified_encounter_flag": {"name": "disqualified_encounter_flag", "description": "A flag that indicates whether this encounter is disqualified from being used in readmission measures for any critical data quality problem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_admit_date_flag": {"name": "missing_admit_date_flag", "description": "A flag that indicates whether the admit date is missing from this encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_discharge_date_flag": {"name": "missing_discharge_date_flag", "description": "A flag that indicates whether the discharge date is missing from this encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_after_discharge_flag": {"name": "admit_after_discharge_flag", "description": "A flag that indicates whether the admit date for the encounter is after the discharge date for the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_discharge_status_code_flag": {"name": "missing_discharge_status_code_flag", "description": "A flag that indicates whether the discharge status code is missing for the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_discharge_status_code_flag": {"name": "invalid_discharge_status_code_flag", "description": "A flag that indicates whether the discharge status code that is present for this encounter is invalid. This flag is 1 only when the discharge status code is present but invalid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_primary_diagnosis_flag": {"name": "missing_primary_diagnosis_flag", "description": "A flag that indicates whether there is no primary diagnosis associated with the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "multiple_primary_diagnosis": {"name": "multiple_primary_diagnosis", "description": "A flag that indicates whether there are multiple primary diagnoses associated with the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_primary_diagnosis_code": {"name": "invalid_primary_diagnosis_code", "description": "A flag that indicates whether the primary diagnosis present for this encounter is invalid, i.e. a non existing ICD-10-CM code. This flag indicates that a primary diagnosis code is indeed present for the encounter, but it is not a valid ICD-10-CM code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "no_diagnosis_ccs_flag": {"name": "no_diagnosis_ccs_flag", "description": "A flag that indicates whether there is no CCS diagnosis category associated with the primary ICD-10-CM diagnosis code for the encounter. This flag indicates that there is a valid primary ICD-10-CM diagnosis code associated with the encounter, but there is no CCS diagnosis category associated with that ICD-10-CM code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overlaps_with_another_encounter_flag": {"name": "overlaps_with_another_encounter_flag", "description": "A flag that indicates whether this encounter's dates overlap with those of another encounter in the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\readmissions__encounter_augmented.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "created_at": 1670340076.175971, "compiled_sql": "-- Here we list all encounters from the stg_encounter model\n-- and we augment them with extra fields\n-- that are relevant for readmission measures\n\n\n\n\n\n\nwith encounter_augmented as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_npi,\n    aa.ms_drg_code,\n    aa.discharge_date - aa.admit_date  as length_of_stay,\n    case\n        when bb.encounter_id is not null then 1\n\telse 0\n    end as index_admission_flag,\n    case\n        when cc.encounter_id is not null then 1\n\telse 0\n    end as planned_flag,\n    dd.specialty_cohort,\n    case\n        when aa.discharge_disposition_code = '20' then 1\n\telse 0\n    end as died_flag,\n    ee.diagnosis_ccs,\n    ee.disqualified_encounter_flag,\n    ee.missing_admit_date_flag,\n    ee.missing_discharge_date_flag,\n    ee.admit_after_discharge_flag,\n    ee.missing_discharge_disposition_code_flag,\n    ee.invalid_discharge_disposition_code_flag,\n    ee.missing_primary_diagnosis_flag,\n    ee.multiple_primary_diagnoses_flag,\n    ee.invalid_primary_diagnosis_code_flag,\n    ee.no_diagnosis_ccs_flag,\n    ee.overlaps_with_another_encounter_flag,\n    ee.missing_ms_drg_flag,\n    ee.invalid_ms_drg_flag\n    \nfrom\n    tuva.readmissions.stg_encounter aa\n    left join tuva.readmissions.index_admission bb\n    on aa.encounter_id = bb.encounter_id\n    left join tuva.readmissions.planned_encounter cc\n    on aa.encounter_id = cc.encounter_id \n    left join tuva.readmissions.encounter_specialty_cohort dd\n    on aa.encounter_id = dd.encounter_id\n    left join tuva.readmissions.encounter_data_quality ee\n    on aa.encounter_id = ee.encounter_id\n)\n\n\n\nselect *\nfrom encounter_augmented", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.encounter_augmented"}, "model.readmissions.readmissions__readmission_summary": {"raw_sql": "-- Here calculate days to readmission for encounters\r\n-- that had a readmission and create readmission flags\r\n\r\n\r\n{{ config(materialized='table'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n\r\n-- We create the encounter_sequence integer count\r\n-- which keeps track of what number of encounter each\r\n-- encounter is for a given patient\r\nwith encounter_sequence as (\r\nselect\r\n    *,\r\n    row_number() over(\r\n        partition by patient_id order by admit_date, discharge_date\r\n    ) as encounter_sequence\r\nfrom {{ ref('readmissions__encounter_augmented') }}\r\nwhere disqualified_encounter_flag = 0\r\n),\r\n\r\n\r\nreadmission_calc as (\r\nselect\r\n    aa.encounter_id,\r\n    aa.patient_id,\r\n    aa.admit_date,\r\n    aa.discharge_date,\r\n    aa.discharge_disposition_code,\r\n    aa.facility_npi,\r\n    aa.ms_drg_code,\r\n    aa.length_of_stay,\r\n    aa.index_admission_flag,\r\n    aa.planned_flag,\r\n    aa.specialty_cohort,\r\n    aa.died_flag,\r\n    aa.diagnosis_ccs,\r\n    case\r\n        when bb.encounter_id is not null then 1\r\n\telse 0\r\n    end as had_readmission_flag,\r\n    bb.admit_date - aa.discharge_date as days_to_readmit,\r\n    case\r\n        when (bb.admit_date - aa.discharge_date) <= 30  then 1\r\n\telse 0\r\n    end as readmit_30_flag,\r\n    case\r\n        when\r\n\t    ((bb.admit_date - aa.discharge_date) <= 30)\r\n\t    and\r\n\t    (bb.planned_flag = 0) then 1\r\n\telse 0\r\n    end as unplanned_readmit_30_flag,\r\n    bb.encounter_id as readmission_encounter_id,\r\n    bb.admit_date as readmission_admit_date,\r\n    bb.discharge_date as readmission_discharge_date,\r\n    bb.discharge_disposition_code as readmission_discharge_disposition_code,\r\n    bb.facility_npi as readmission_facility,\r\n    bb.ms_drg_code as readmission_ms_drg,\r\n    bb.length_of_stay as readmission_length_of_stay,\r\n    bb.index_admission_flag as readmission_index_admission_flag,\r\n    bb.planned_flag as readmission_planned_flag,\r\n    bb.specialty_cohort as readmission_specialty_cohort,\r\n    bb.died_flag as readmission_died_flag,\r\n    bb.diagnosis_ccs as readmission_diagnosis_ccs\r\n\r\n\r\nfrom\r\n    encounter_sequence aa\r\n    left join encounter_sequence bb\r\n    on aa.patient_id = bb.patient_id\r\n    and aa.encounter_sequence + 1 = bb.encounter_sequence\r\n)\r\n\r\n\r\n\r\nselect *\r\nfrom readmission_calc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__encounter_augmented"]}, "config": {"enabled": true, "alias": "readmission_summary", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "readmissions__readmission_summary"], "unique_id": "model.readmissions.readmissions__readmission_summary", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "readmissions__readmission_summary.sql", "original_file_path": "models\\readmissions__readmission_summary.sql", "name": "readmissions__readmission_summary", "alias": "readmission_summary", "checksum": {"name": "sha256", "checksum": "c57037fcb4a70c3169a5647c4f9635f759b0f1a56081e69bf9e35fb7574190b9"}, "tags": ["readmissions"], "refs": [["readmissions__encounter_augmented"]], "sources": [], "metrics": [], "description": "This model includes all rows from the encounter_augmented model where disqualified_encounter_flag = 0 (all rows for encounters that are not disqualified for data quality issues). For each of these encounters we add fields to indicate whether it had a readmission and, when a readmission was present, to show relevant fields for the readmission.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_date": {"name": "admit_date", "description": "The date of admission for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "The date of discharge for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_status_code": {"name": "discharge_status_code", "description": "The valid 2-digit discharge status for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "facility": {"name": "facility", "description": "A name or ID for the facility where the inpatient visit occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ms_drg": {"name": "ms_drg", "description": "The MS-DRG associted with the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "length_of_stay": {"name": "length_of_stay", "description": "Integer representing the length of stay of the inpatient visit in days", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index_admission_flag": {"name": "index_admission_flag", "description": "Flag to indicate if the encounter is an index admission", "meta": {}, "data_type": null, "quote": null, "tags": []}, "planned_flag": {"name": "planned_flag", "description": "Flag to indicate if the encounter was planned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specialty_cohort": {"name": "specialty_cohort", "description": "Specialty cohort the encounter belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "died_flag": {"name": "died_flag", "description": "Flag to indicate of the patient died in this encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_ccs": {"name": "diagnosis_ccs", "description": "CCS code associated with the primary diagnosis for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "had_readmission_flag": {"name": "had_readmission_flag", "description": "A flag to indicate whether the encounter had a readmission any number of days after discharge", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_to_readmit": {"name": "days_to_readmit", "description": "An integer to indicate the number of days to readmission", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmit_30_flag": {"name": "readmit_30_flag", "description": "A flag to indicate whether the encounter had a 30-day readmission", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unplanned_readmit_30_flag": {"name": "unplanned_readmit_30_flag", "description": "A flag to indicate whether the encounter had an unplanned 30-day readmission", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_encounter_id": {"name": "readmission_encounter_id", "description": "The unique identifier for the readmission encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_patient_id": {"name": "readmission_patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_admit_date": {"name": "readmission_admit_date", "description": "The date of admission for the readmission inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_discharge_date": {"name": "readmission_discharge_date", "description": "The date of discharge for the readmission inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_discharge_status_code": {"name": "readmission_discharge_status_code", "description": "The valid 2-digit discharge status for the readmission inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_facility": {"name": "readmission_facility", "description": "A name or ID for the facility where the readmission inpatient visit occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_ms_drg": {"name": "readmission_ms_drg", "description": "The MS-DRG associted with the readmission inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_length_of_stay": {"name": "readmission_length_of_stay", "description": "Integer representing the length of stay of the readmission inpatient visit in days", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_index_admission_flag": {"name": "readmission_index_admission_flag", "description": "Flag to indicate if the readmission encounter is an index admission", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_planned_flag": {"name": "readmission_planned_flag", "description": "Flag to indicate if the readmission encounter was planned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_specialty_cohort": {"name": "readmission_specialty_cohort", "description": "Specialty cohort the readmission encounter belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_died_flag": {"name": "readmission_died_flag", "description": "Flag to indicate of the patient died in the readmission encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_diagnosis_ccs": {"name": "readmission_diagnosis_ccs", "description": "CCS code associated with the primary diagnosis for the readmission encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\readmissions__readmission_summary.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "created_at": 1670340076.2283509, "compiled_sql": "-- Here calculate days to readmission for encounters\n-- that had a readmission and create readmission flags\n\n\n\n\n\n\n-- We create the encounter_sequence integer count\n-- which keeps track of what number of encounter each\n-- encounter is for a given patient\nwith encounter_sequence as (\nselect\n    *,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_sequence\nfrom tuva.readmissions.encounter_augmented\nwhere disqualified_encounter_flag = 0\n),\n\n\nreadmission_calc as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_npi,\n    aa.ms_drg_code,\n    aa.length_of_stay,\n    aa.index_admission_flag,\n    aa.planned_flag,\n    aa.specialty_cohort,\n    aa.died_flag,\n    aa.diagnosis_ccs,\n    case\n        when bb.encounter_id is not null then 1\n\telse 0\n    end as had_readmission_flag,\n    bb.admit_date - aa.discharge_date as days_to_readmit,\n    case\n        when (bb.admit_date - aa.discharge_date) <= 30  then 1\n\telse 0\n    end as readmit_30_flag,\n    case\n        when\n\t    ((bb.admit_date - aa.discharge_date) <= 30)\n\t    and\n\t    (bb.planned_flag = 0) then 1\n\telse 0\n    end as unplanned_readmit_30_flag,\n    bb.encounter_id as readmission_encounter_id,\n    bb.admit_date as readmission_admit_date,\n    bb.discharge_date as readmission_discharge_date,\n    bb.discharge_disposition_code as readmission_discharge_disposition_code,\n    bb.facility_npi as readmission_facility,\n    bb.ms_drg_code as readmission_ms_drg,\n    bb.length_of_stay as readmission_length_of_stay,\n    bb.index_admission_flag as readmission_index_admission_flag,\n    bb.planned_flag as readmission_planned_flag,\n    bb.specialty_cohort as readmission_specialty_cohort,\n    bb.died_flag as readmission_died_flag,\n    bb.diagnosis_ccs as readmission_diagnosis_ccs\n\n\nfrom\n    encounter_sequence aa\n    left join encounter_sequence bb\n    on aa.patient_id = bb.patient_id\n    and aa.encounter_sequence + 1 = bb.encounter_sequence\n)\n\n\n\nselect *\nfrom readmission_calc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.readmission_summary"}, "model.readmissions.readmissions__diagnosis_ccs": {"raw_sql": "-- Here we take all rows from the stg_diagnosis\r\n-- table that correspond to encounters with\r\n-- one and only one primary diagnosis code.\r\n-- To each of these rows we also append:\r\n--\r\n--      - a 'valid_icd_10_cm_flag' to verify if it is a\r\n--        valid ICD-10-CM code\r\n--\r\n--      - a 'ccs_diagnosis_category' column to indicate\r\n--        the associated diagnosis category\r\n--\r\n-- encounter_ids that have no primary diagnosis or\r\n-- multiple primary diagnoses are not part of this model\r\n-- because it is impossible to assign a ccs_diagnosis_category\r\n-- to them. In theory, each encounter should have a unique\r\n-- ccs_diagnosis_category that is determined by their unique\r\n-- primary diagnosis ICD-10-CM code.\r\n\r\n\r\n{{ config(materialized='view'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True)))}}\r\n\r\n\r\nselect\r\n    aa.encounter_id,\r\n    aa.diagnosis_code,\r\n    aa.diagnosis_rank,\r\n    case\r\n        when bb.icd_10_cm is null then 0\r\n\telse 1\r\n    end as valid_icd_10_cm_flag,\r\n    cc.ccs_diagnosis_category\r\nfrom\r\n    {{ ref('readmissions__stg_diagnosis') }} aa\r\n    left join {{ ref('terminology__icd_10_cm') }} bb\r\n    on aa.diagnosis_code = bb.icd_10_cm\r\n    left join {{ ref('terminology__icd_10_cm_to_ccs') }} cc\r\n    on aa.diagnosis_code = cc.icd_10_cm\r\n    left join {{ ref('readmissions__primary_diagnosis_count') }} dd\r\n    on aa.encounter_id = dd.encounter_id\r\n\r\nwhere\r\n    aa.diagnosis_rank = 1\r\n    and\r\n    dd.primary_dx_count = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_diagnosis", "seed.terminology.terminology__icd_10_cm", "seed.terminology.terminology__icd_10_cm_to_ccs", "model.readmissions.readmissions__primary_diagnosis_count"]}, "config": {"enabled": true, "alias": "diagnosis_ccs", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__diagnosis_ccs"], "unique_id": "model.readmissions.readmissions__diagnosis_ccs", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__diagnosis_ccs.sql", "original_file_path": "models\\intermediate\\readmissions__diagnosis_ccs.sql", "name": "readmissions__diagnosis_ccs", "alias": "diagnosis_ccs", "checksum": {"name": "sha256", "checksum": "ce67c8ee3c1c81c415306c684473eaa7ca8cb80d4d42a16d79ff2cb918fc6d7e"}, "tags": ["readmissions"], "refs": [["readmissions__stg_diagnosis"], ["terminology__icd_10_cm"], ["terminology__icd_10_cm_to_ccs"], ["readmissions__primary_diagnosis_count"]], "sources": [], "metrics": [], "description": "This model includes all encounter_ids from the stg_diagnosis table that have one and only one primary diagnosis code associated with them. There is one row for each of these encounters, namely, the row corresponding to the unique primary diagnosis code of the encounter. Therefore, the number of rows in this model is equal to the number of encounter_ids in the stg_diagnosis model that have one and only one primary diagnosis code. We add a valid_icd_10_cm_flag to indicate if the primary diagnosis code for the encounter is a valid ICD-10-CM code. We also add the CCS diagnosis category associated with the primary diagnosis code of the encounter.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code": {"name": "diagnosis_code", "description": "An ICD-10-CM diagnosis code associated with this encounter_id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_rank": {"name": "diagnosis_rank", "description": "A positive integer giving the diagnosis ranking for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_icd_10_cm_flag": {"name": "valid_icd_10_cm_flag", "description": "A flag indicating if the ICD-10-CM diagnosis code given is valid", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ccs_diagnosis_category": {"name": "ccs_diagnosis_category", "description": "The CCS code associated with the given ICD-10-CM diagnosis", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\intermediate\\readmissions__diagnosis_ccs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1670340076.1685402, "compiled_sql": "-- Here we take all rows from the stg_diagnosis\n-- table that correspond to encounters with\n-- one and only one primary diagnosis code.\n-- To each of these rows we also append:\n--\n--      - a 'valid_icd_10_cm_flag' to verify if it is a\n--        valid ICD-10-CM code\n--\n--      - a 'ccs_diagnosis_category' column to indicate\n--        the associated diagnosis category\n--\n-- encounter_ids that have no primary diagnosis or\n-- multiple primary diagnoses are not part of this model\n-- because it is impossible to assign a ccs_diagnosis_category\n-- to them. In theory, each encounter should have a unique\n-- ccs_diagnosis_category that is determined by their unique\n-- primary diagnosis ICD-10-CM code.\n\n\n\n\n\nselect\n    aa.encounter_id,\n    aa.diagnosis_code,\n    aa.diagnosis_rank,\n    case\n        when bb.icd_10_cm is null then 0\n\telse 1\n    end as valid_icd_10_cm_flag,\n    cc.ccs_diagnosis_category\nfrom\n    tuva.readmissions.stg_diagnosis aa\n    left join tuva.terminology.icd_10_cm bb\n    on aa.diagnosis_code = bb.icd_10_cm\n    left join tuva.terminology.icd_10_cm_to_ccs cc\n    on aa.diagnosis_code = cc.icd_10_cm\n    left join tuva.readmissions.primary_diagnosis_count dd\n    on aa.encounter_id = dd.encounter_id\n\nwhere\n    aa.diagnosis_rank = 1\n    and\n    dd.primary_dx_count = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.diagnosis_ccs"}, "model.readmissions.readmissions__encounter_data_quality": {"raw_sql": "-- Here we list all encounters from the stg_encounter table\r\n-- with data quality flags that may disqualify them from\r\n-- being used for readmission measures \r\n\r\n\r\n{{ config(materialized='view'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n\r\n-- Flag several potential data quality issues\r\n-- with all encounters.\r\n-- Every encounter_id from the stg_encounter model\r\n-- will be here. This CTE should have the same\r\n-- number of rows as the stg_encounter model, i.e.,\r\n-- there is a one to one correspondence between the\r\n-- rows in stg_encounter and this CTE.\r\nwith encounter_data_quality_issues as (\r\nselect\r\n    aa.encounter_id,\r\n    case\r\n        when aa.admit_date is null then 1\r\n\telse 0\r\n    end as missing_admit_date_flag,\r\n    case\r\n        when aa.discharge_date is null then 1\r\n\telse 0\r\n    end as missing_discharge_date_flag,\r\n    case\r\n        when aa.admit_date > aa.discharge_date then 1\r\n\telse 0\r\n    end as admit_after_discharge_flag,\r\n    case\r\n        when aa.discharge_disposition_code is null then 1\r\n\telse 0\r\n    end as missing_discharge_disposition_code_flag,\r\n    case\r\n        when\r\n\t    (aa.discharge_disposition_code is not null)\r\n\t    and\r\n\t    (cc.discharge_disposition_code is null) then 1\r\n\telse 0\r\n    end as invalid_discharge_disposition_code_flag,\r\n    case\r\n        when (  (dd.primary_dx_count is null)\r\n\t        or\r\n\t        (dd.primary_dx_count = 0)\r\n\t\tor\r\n\t\t(dd.primary_dx_count = 1 and bb.diagnosis_code is null)  )\r\n\t     then 1\r\n\telse 0\r\n    end as missing_primary_diagnosis_flag,\r\n    case\r\n        when dd.primary_dx_count > 1 then 1\r\n\telse 0\r\n    end as multiple_primary_diagnoses_flag,\r\n    case\r\n        when bb.valid_icd_10_cm_flag = 0 then 1\r\n\telse 0\r\n    end as invalid_primary_diagnosis_code_flag,\r\n    case\r\n        when (  bb.valid_icd_10_cm_flag = 1\r\n\t        and\r\n\t        bb.ccs_diagnosis_category is null  )\r\n             then 1\r\n\telse 0\r\n    end as no_diagnosis_ccs_flag,\r\n    bb.ccs_diagnosis_category as diagnosis_ccs,\r\n    case\r\n        when aa.encounter_id in (select distinct encounter_id_A\r\n\t                         from {{ ref('readmissions__encounter_overlap') }} )\r\n\t     or\r\n\t     aa.encounter_id in (select distinct encounter_id_B\r\n\t                         from {{ ref('readmissions__encounter_overlap') }} )\r\n\tthen 1\r\n\telse 0\r\n    end as overlaps_with_another_encounter_flag,\r\n    case\r\n        when aa.ms_drg_code is null then 1\r\n\telse 0\r\n    end as missing_ms_drg_flag,\r\n    case\r\n        when ee.ms_drg_code is null then 1\r\n\telse 0\r\n    end as invalid_ms_drg_flag\r\n\r\nfrom {{ ref('readmissions__stg_encounter') }} aa\r\n     left join {{ ref('readmissions__diagnosis_ccs') }} bb\r\n     on aa.encounter_id = bb.encounter_id\r\n     left join {{ ref('terminology__discharge_disposition') }} cc\r\n     on aa.discharge_disposition_code = cc.discharge_disposition_code\r\n     left join {{ ref('readmissions__primary_diagnosis_count') }} dd\r\n     on aa.encounter_id = dd.encounter_id\r\n     left join {{ ref('terminology__ms_drg') }} ee\r\n     on aa.ms_drg_code = ee.ms_drg_code\r\n),\r\n\r\n\r\n-- Here we add a disqualified_encounter_flag.\r\n-- This disqualified_encounter_flag = 1\r\n-- when any of the critical data quality flags\r\n-- from the above CTE are equal to 1.\r\nall_data_quality_flags as (\r\nselect\r\n    encounter_id,\r\n    diagnosis_ccs,\r\n    case\r\n        when\r\n\t    (missing_admit_date_flag = 1)\r\n\t    or\r\n\t    (missing_discharge_date_flag = 1)\r\n\t    or\r\n\t    (admit_after_discharge_flag = 1)\r\n\t    or\r\n\t    (missing_discharge_disposition_code_flag = 1)\r\n\t    or\r\n\t    (invalid_discharge_disposition_code_flag = 1)\r\n\t    or\r\n\t    (missing_primary_diagnosis_flag = 1)\r\n\t    or\r\n\t    (multiple_primary_diagnoses_flag =1)\r\n\t    or\r\n\t    (invalid_primary_diagnosis_code_flag = 1)\r\n\t    or\r\n\t    (no_diagnosis_ccs_flag = 1)\r\n\t    or\r\n\t    (overlaps_with_another_encounter_flag = 1)\r\n\t    or\r\n\t    (missing_ms_drg_flag = 1)\r\n\t    or\r\n\t    (invalid_ms_drg_flag = 1)\r\n\t    then 1\r\n\telse 0\r\n    end as disqualified_encounter_flag,\r\n    missing_admit_date_flag,\r\n    missing_discharge_date_flag,\r\n    admit_after_discharge_flag,\r\n    missing_discharge_disposition_code_flag,\r\n    invalid_discharge_disposition_code_flag,\r\n    missing_primary_diagnosis_flag,\r\n    multiple_primary_diagnoses_flag,\r\n    invalid_primary_diagnosis_code_flag,\r\n    no_diagnosis_ccs_flag,\r\n    overlaps_with_another_encounter_flag,\r\n    missing_ms_drg_flag,\r\n    invalid_ms_drg_flag\r\nfrom encounter_data_quality_issues\r\n)    \r\n\r\n\r\n\r\nselect *\r\nfrom all_data_quality_flags", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__discharge_disposition", "model.readmissions.readmissions__primary_diagnosis_count", "seed.terminology.terminology__ms_drg"]}, "config": {"enabled": true, "alias": "encounter_data_quality", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__encounter_data_quality"], "unique_id": "model.readmissions.readmissions__encounter_data_quality", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__encounter_data_quality.sql", "original_file_path": "models\\intermediate\\readmissions__encounter_data_quality.sql", "name": "readmissions__encounter_data_quality", "alias": "encounter_data_quality", "checksum": {"name": "sha256", "checksum": "63574e6bc7f0a72dd0c8ebd399acf9b3d851b45685fde33e53406660f4b52989"}, "tags": ["readmissions"], "refs": [["readmissions__encounter_overlap"], ["readmissions__encounter_overlap"], ["readmissions__stg_encounter"], ["readmissions__diagnosis_ccs"], ["terminology__discharge_disposition"], ["readmissions__primary_diagnosis_count"], ["terminology__ms_drg"]], "sources": [], "metrics": [], "description": "This model has the same number of rows as the stg_encounter model. Here we have one row for every unique encounter in the stg_encounter model, and for each encounter we have a flag (disqualified_encounter_flag) to indicte if the encounter is disqualified from being useful for readmission measures. We also have other flags to indicate which specific data quality issues this encounter has that may disqualify it from being used in readmission measures.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_ccs": {"name": "diagnosis_ccs", "description": "The CCS diagnosis category associated with the primary diagnosis of this encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disqualified_encounter_flag": {"name": "disqualified_encounter_flag", "description": "A flag that indicates whether this encounter is disqualified from being used in readmission measures for any critical data quality problem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_admit_date_flag": {"name": "missing_admit_date_flag", "description": "A flag that indicates whether the admit date is missing from this encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_discharge_date_flag": {"name": "missing_discharge_date_flag", "description": "A flag that indicates whether the discharge date is missing from this encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_after_discharge_flag": {"name": "admit_after_discharge_flag", "description": "A flag that indicates whether the admit date for the encounter is after the discharge date for the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_discharge_status_code_flag": {"name": "missing_discharge_status_code_flag", "description": "A flag that indicates whether the discharge status code is missing for the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_discharge_status_code_flag": {"name": "invalid_discharge_status_code_flag", "description": "A flag that indicates whether the discharge status code that is present for this encounter is invalid. This flag is 1 only when the discharge status code is present but invalid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_primary_diagnosis_flag": {"name": "missing_primary_diagnosis_flag", "description": "A flag that indicates whether there is no primary diagnosis associated with the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "multiple_primary_diagnosis": {"name": "multiple_primary_diagnosis", "description": "A flag that indicates whether there are multiple primary diagnoses associated with the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_primary_diagnosis_code": {"name": "invalid_primary_diagnosis_code", "description": "A flag that indicates whether the primary diagnosis present for this encounter is invalid, i.e. a non existing ICD-10-CM code. This flag indicates that a primary diagnosis code is indeed present for the encounter, but it is not a valid ICD-10-CM code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "no_diagnosis_ccs_flag": {"name": "no_diagnosis_ccs_flag", "description": "A flag that indicates whether there is no CCS diagnosis category associated with the primary ICD-10-CM diagnosis code for the encounter. This flag indicates that there is a valid primary ICD-10-CM diagnosis code associated with the encounter, but there is no CCS diagnosis category associated with that ICD-10-CM code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overlaps_with_another_encounter_flag": {"name": "overlaps_with_another_encounter_flag", "description": "A flag that indicates whether this encounter's dates overlap with those of another encounter in the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\intermediate\\readmissions__encounter_data_quality.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1670340076.183646, "compiled_sql": "-- Here we list all encounters from the stg_encounter table\n-- with data quality flags that may disqualify them from\n-- being used for readmission measures \n\n\n\n\n\n\n-- Flag several potential data quality issues\n-- with all encounters.\n-- Every encounter_id from the stg_encounter model\n-- will be here. This CTE should have the same\n-- number of rows as the stg_encounter model, i.e.,\n-- there is a one to one correspondence between the\n-- rows in stg_encounter and this CTE.\nwith encounter_data_quality_issues as (\nselect\n    aa.encounter_id,\n    case\n        when aa.admit_date is null then 1\n\telse 0\n    end as missing_admit_date_flag,\n    case\n        when aa.discharge_date is null then 1\n\telse 0\n    end as missing_discharge_date_flag,\n    case\n        when aa.admit_date > aa.discharge_date then 1\n\telse 0\n    end as admit_after_discharge_flag,\n    case\n        when aa.discharge_disposition_code is null then 1\n\telse 0\n    end as missing_discharge_disposition_code_flag,\n    case\n        when\n\t    (aa.discharge_disposition_code is not null)\n\t    and\n\t    (cc.discharge_disposition_code is null) then 1\n\telse 0\n    end as invalid_discharge_disposition_code_flag,\n    case\n        when (  (dd.primary_dx_count is null)\n\t        or\n\t        (dd.primary_dx_count = 0)\n\t\tor\n\t\t(dd.primary_dx_count = 1 and bb.diagnosis_code is null)  )\n\t     then 1\n\telse 0\n    end as missing_primary_diagnosis_flag,\n    case\n        when dd.primary_dx_count > 1 then 1\n\telse 0\n    end as multiple_primary_diagnoses_flag,\n    case\n        when bb.valid_icd_10_cm_flag = 0 then 1\n\telse 0\n    end as invalid_primary_diagnosis_code_flag,\n    case\n        when (  bb.valid_icd_10_cm_flag = 1\n\t        and\n\t        bb.ccs_diagnosis_category is null  )\n             then 1\n\telse 0\n    end as no_diagnosis_ccs_flag,\n    bb.ccs_diagnosis_category as diagnosis_ccs,\n    case\n        when aa.encounter_id in (select distinct encounter_id_A\n\t                         from tuva.readmissions.encounter_overlap )\n\t     or\n\t     aa.encounter_id in (select distinct encounter_id_B\n\t                         from tuva.readmissions.encounter_overlap )\n\tthen 1\n\telse 0\n    end as overlaps_with_another_encounter_flag,\n    case\n        when aa.ms_drg_code is null then 1\n\telse 0\n    end as missing_ms_drg_flag,\n    case\n        when ee.ms_drg_code is null then 1\n\telse 0\n    end as invalid_ms_drg_flag\n\nfrom tuva.readmissions.stg_encounter aa\n     left join tuva.readmissions.diagnosis_ccs bb\n     on aa.encounter_id = bb.encounter_id\n     left join tuva.terminology.discharge_disposition cc\n     on aa.discharge_disposition_code = cc.discharge_disposition_code\n     left join tuva.readmissions.primary_diagnosis_count dd\n     on aa.encounter_id = dd.encounter_id\n     left join tuva.terminology.ms_drg ee\n     on aa.ms_drg_code = ee.ms_drg_code\n),\n\n\n-- Here we add a disqualified_encounter_flag.\n-- This disqualified_encounter_flag = 1\n-- when any of the critical data quality flags\n-- from the above CTE are equal to 1.\nall_data_quality_flags as (\nselect\n    encounter_id,\n    diagnosis_ccs,\n    case\n        when\n\t    (missing_admit_date_flag = 1)\n\t    or\n\t    (missing_discharge_date_flag = 1)\n\t    or\n\t    (admit_after_discharge_flag = 1)\n\t    or\n\t    (missing_discharge_disposition_code_flag = 1)\n\t    or\n\t    (invalid_discharge_disposition_code_flag = 1)\n\t    or\n\t    (missing_primary_diagnosis_flag = 1)\n\t    or\n\t    (multiple_primary_diagnoses_flag =1)\n\t    or\n\t    (invalid_primary_diagnosis_code_flag = 1)\n\t    or\n\t    (no_diagnosis_ccs_flag = 1)\n\t    or\n\t    (overlaps_with_another_encounter_flag = 1)\n\t    or\n\t    (missing_ms_drg_flag = 1)\n\t    or\n\t    (invalid_ms_drg_flag = 1)\n\t    then 1\n\telse 0\n    end as disqualified_encounter_flag,\n    missing_admit_date_flag,\n    missing_discharge_date_flag,\n    admit_after_discharge_flag,\n    missing_discharge_disposition_code_flag,\n    invalid_discharge_disposition_code_flag,\n    missing_primary_diagnosis_flag,\n    multiple_primary_diagnoses_flag,\n    invalid_primary_diagnosis_code_flag,\n    no_diagnosis_ccs_flag,\n    overlaps_with_another_encounter_flag,\n    missing_ms_drg_flag,\n    invalid_ms_drg_flag\nfrom encounter_data_quality_issues\n)    \n\n\n\nselect *\nfrom all_data_quality_flags", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.encounter_data_quality"}, "model.readmissions.readmissions__encounter_overlap": {"raw_sql": "-- Here we give a list of all pairs of encounters\r\n-- that have some date overlap.\r\n\r\n\r\n{{ config(materialized='view'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n\r\nwith encounters_with_row_num as (\r\nselect\r\n    encounter_id,\r\n    patient_id,\r\n    admit_date,\r\n    discharge_date,\r\n    row_number() over (\r\n        partition by patient_id order by encounter_id\r\n\t) as row_num\r\nfrom {{ ref('readmissions__stg_encounter') }}\r\n),\r\n\r\n\r\ncartesian as (\r\nselect\r\n    aa.encounter_id as encounter_id_A,\r\n    bb.encounter_id as encounter_id_B,\r\n    aa.patient_id,\r\n    aa.admit_date as Ai,\r\n    aa.discharge_date as Af,\r\n    bb.admit_date as Bi,\r\n    bb.discharge_date as Bf,\r\n    case\r\n        when (Ai between Bi and Bf) or (Af between Bi and Bf) or\r\n             (Bi between Ai and Af) or (Bf between Ai and Af)\r\n        then 1\r\n        else 0\r\n    end as overlap\r\n    from encounters_with_row_num aa\r\n    left join encounters_with_row_num bb\r\n    on aa.patient_id = bb.patient_id and aa.row_num < bb.row_num\r\n),\r\n\r\n\r\noverlapping_pairs\r\nas\r\n(\r\n    select\r\n        patient_id,\r\n        encounter_id_A,\r\n\tencounter_id_B\r\n    from cartesian\r\n    where overlap = 1\r\n)\r\n\r\n\r\n\r\nselect *\r\nfrom overlapping_pairs", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_encounter"]}, "config": {"enabled": true, "alias": "encounter_overlap", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__encounter_overlap"], "unique_id": "model.readmissions.readmissions__encounter_overlap", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__encounter_overlap.sql", "original_file_path": "models\\intermediate\\readmissions__encounter_overlap.sql", "name": "readmissions__encounter_overlap", "alias": "encounter_overlap", "checksum": {"name": "sha256", "checksum": "5c26f0b55011419c9287cde34ccb2618aa49d33f386f11785beb430b4764c741"}, "tags": ["readmissions"], "refs": [["readmissions__stg_encounter"]], "sources": [], "metrics": [], "description": "This model lists all pairs of encounters that have some date overlap.", "columns": {"patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_id_A": {"name": "encounter_id_A", "description": "Unique identifier for one of the overlapping encounters", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_id_B": {"name": "encounter_id_B", "description": "Unique identifier for the other overlapping encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\intermediate\\readmissions__encounter_overlap.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1670340076.1893518, "compiled_sql": "-- Here we give a list of all pairs of encounters\n-- that have some date overlap.\n\n\n\n\n\n\nwith encounters_with_row_num as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date,\n    row_number() over (\n        partition by patient_id order by encounter_id\n\t) as row_num\nfrom tuva.readmissions.stg_encounter\n),\n\n\ncartesian as (\nselect\n    aa.encounter_id as encounter_id_A,\n    bb.encounter_id as encounter_id_B,\n    aa.patient_id,\n    aa.admit_date as Ai,\n    aa.discharge_date as Af,\n    bb.admit_date as Bi,\n    bb.discharge_date as Bf,\n    case\n        when (Ai between Bi and Bf) or (Af between Bi and Bf) or\n             (Bi between Ai and Af) or (Bf between Ai and Af)\n        then 1\n        else 0\n    end as overlap\n    from encounters_with_row_num aa\n    left join encounters_with_row_num bb\n    on aa.patient_id = bb.patient_id and aa.row_num < bb.row_num\n),\n\n\noverlapping_pairs\nas\n(\n    select\n        patient_id,\n        encounter_id_A,\n\tencounter_id_B\n    from cartesian\n    where overlap = 1\n)\n\n\n\nselect *\nfrom overlapping_pairs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.encounter_overlap"}, "model.readmissions.readmissions__encounter_specialty_cohort": {"raw_sql": "-- Here we list the specialty cohort for each encounter that has\r\n-- an associated specialty cohort.\r\n-- There are 5 possible specialty cohorts:\r\n--      [1] Medicine\r\n--      [2] Surgery/Gynecology\r\n--      [3] Cardiology\r\n--      [4] Cardiovascular\r\n--      [5] Neurology\r\n-- An encounter that has an ICD-10-PCS procedure code or a\r\n-- CCS procedure category that corresponds to the\r\n-- 'Surgery/Gynecology' cohort will always be in that cohort.\r\n-- For encounters that are not in the 'Surgery/Gynecology' cohort,\r\n-- we then check to see if they are in one of the other 4 cohorts.\r\n\r\n\r\n{{ config(materialized='view'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n\r\n-- All encounter_ids that have an ICD-10-PCS procedure code\r\n-- or a CCS procedure category that corresponds to the\r\n-- 'Surgery/Gynecology' cohort\r\nwith surgery_gynecology as (\r\nselect distinct encounter_id\r\nfrom {{ ref('readmissions__procedure_ccs') }}\r\nwhere\r\n    procedure_code in (select distinct icd_10_pcs\r\n                       from {{ ref('terminology__surgery_gynecology_cohort') }} )\r\n    or\r\n    ccs_procedure_category in\r\n           (select distinct ccs\r\n            from {{ ref('terminology__specialty_cohort') }}\r\n\t    where specialty_cohort = 'Surgery/Gynecology' )\r\n),\r\n\r\n\r\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\r\n-- and are in the 'Medicine' cohort\r\nmedicine as (\r\nselect distinct encounter_id\r\nfrom {{ ref('readmissions__diagnosis_ccs') }}\r\nwhere\r\n    encounter_id not in (select * from surgery_gynecology)\r\n    and\r\n    ccs_diagnosis_category in\r\n           (select distinct ccs\r\n            from {{ ref('terminology__specialty_cohort') }}\r\n\t    where specialty_cohort = 'Medicine' )\r\n),\r\n\r\n\r\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\r\n-- and are in the 'Cardiorespiratory' cohort\r\ncardiorespiratory as (\r\nselect distinct encounter_id\r\nfrom {{ ref('readmissions__diagnosis_ccs') }}\r\nwhere\r\n    encounter_id not in (select * from surgery_gynecology)\r\n    and\r\n    ccs_diagnosis_category in\r\n           (select distinct ccs\r\n            from {{ ref('terminology__specialty_cohort') }}\r\n\t    where specialty_cohort = 'Cardiorespiratory' )    \r\n),\r\n\r\n\r\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\r\n-- and are in the 'Cardiovascular' cohort\r\ncardiovascular as (\r\nselect distinct encounter_id\r\nfrom {{ ref('readmissions__diagnosis_ccs') }}\r\nwhere\r\n    encounter_id not in (select * from surgery_gynecology)\r\n    and\r\n    ccs_diagnosis_category in\r\n           (select distinct ccs\r\n            from {{ ref('terminology__specialty_cohort') }}\r\n\t    where specialty_cohort = 'Cardiovascular' )    \r\n),\r\n\r\n\r\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\r\n-- and are in the 'Neurology' cohort\r\nneurology as (\r\nselect distinct encounter_id\r\nfrom {{ ref('readmissions__diagnosis_ccs') }}\r\nwhere\r\n    encounter_id not in (select * from surgery_gynecology)\r\n    and\r\n    ccs_diagnosis_category in\r\n           (select distinct ccs\r\n            from {{ ref('terminology__specialty_cohort') }}\r\n\t    where specialty_cohort = 'Neurology' )    \r\n),\r\n\r\n\r\n-- All encounter_ids that have an associated cohort listed\r\n-- with their corresponding cohort\r\nall_cohorts as (\r\nselect encounter_id, 'Surgery/Gynecology' as specialty_cohort\r\nfrom surgery_gynecology\r\nunion\r\nselect encounter_id, 'Medicine' as specialty_cohort\r\nfrom medicine\r\nunion\r\nselect encounter_id, 'Cardiorespiratory' as specialty_cohort\r\nfrom cardiorespiratory\r\nunion\r\nselect encounter_id, 'Cardiovascular' as specialty_cohort\r\nfrom cardiovascular\r\nunion\r\nselect encounter_id, 'Neurology' as specialty_cohort\r\nfrom neurology\r\n),\r\n\r\n\r\n-- Assign a specialty cohort to ALL encounters. If an encounter\r\n-- does not belong to any specialty cohort according to the\r\n-- rules above, then it is assigned to the 'Medicine' cohort\r\n-- by default\r\ncohorts_for_all_encounters as (\r\nselect\r\n    aa.encounter_id,\r\n    case\r\n        when bb.specialty_cohort is not null then bb.specialty_cohort\r\n\telse 'Medicine'\r\n    end as specialty_cohort\r\nfrom {{ ref('readmissions__stg_encounter') }} aa\r\n     left join all_cohorts bb on aa.encounter_id = bb.encounter_id\r\n)\r\n\r\n\r\n\r\nselect *\r\nfrom cohorts_for_all_encounters", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__procedure_ccs", "seed.terminology.terminology__surgery_gynecology_cohort", "seed.terminology.terminology__specialty_cohort", "model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__specialty_cohort", "model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__specialty_cohort", "model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__specialty_cohort", "model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__specialty_cohort", "model.readmissions.readmissions__stg_encounter"]}, "config": {"enabled": true, "alias": "encounter_specialty_cohort", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__encounter_specialty_cohort"], "unique_id": "model.readmissions.readmissions__encounter_specialty_cohort", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__encounter_specialty_cohort.sql", "original_file_path": "models\\intermediate\\readmissions__encounter_specialty_cohort.sql", "name": "readmissions__encounter_specialty_cohort", "alias": "encounter_specialty_cohort", "checksum": {"name": "sha256", "checksum": "198e9d648cf2082da66bb4b75ad5bb5070959c31b503a8c1a8e6972eb05e0fcd"}, "tags": ["readmissions"], "refs": [["readmissions__procedure_ccs"], ["terminology__surgery_gynecology_cohort"], ["terminology__specialty_cohort"], ["readmissions__diagnosis_ccs"], ["terminology__specialty_cohort"], ["readmissions__diagnosis_ccs"], ["terminology__specialty_cohort"], ["readmissions__diagnosis_ccs"], ["terminology__specialty_cohort"], ["readmissions__diagnosis_ccs"], ["terminology__specialty_cohort"], ["readmissions__stg_encounter"]], "sources": [], "metrics": [], "description": "This model lists the specialty cohort associated with each inpatient encounter. All encounters in the stg_encounter model are present here, and each gets a specialty cohort assigned from the following list of 5 options: Surgery/Gynecology, Medicine, Cardiorespiratory, Cardiovascular, Neurology. Encounters that don't have a specialty cohort get 'Medicine' assigned by default.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specialty_cohort": {"name": "specialty_cohort", "description": "The specialty cohort associated with the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\intermediate\\readmissions__encounter_specialty_cohort.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1670340076.1919494, "compiled_sql": "-- Here we list the specialty cohort for each encounter that has\n-- an associated specialty cohort.\n-- There are 5 possible specialty cohorts:\n--      [1] Medicine\n--      [2] Surgery/Gynecology\n--      [3] Cardiology\n--      [4] Cardiovascular\n--      [5] Neurology\n-- An encounter that has an ICD-10-PCS procedure code or a\n-- CCS procedure category that corresponds to the\n-- 'Surgery/Gynecology' cohort will always be in that cohort.\n-- For encounters that are not in the 'Surgery/Gynecology' cohort,\n-- we then check to see if they are in one of the other 4 cohorts.\n\n\n\n\n\n\n-- All encounter_ids that have an ICD-10-PCS procedure code\n-- or a CCS procedure category that corresponds to the\n-- 'Surgery/Gynecology' cohort\nwith surgery_gynecology as (\nselect distinct encounter_id\nfrom tuva.readmissions.procedure_ccs\nwhere\n    procedure_code in (select distinct icd_10_pcs\n                       from tuva.terminology.surgery_gynecology_cohort )\n    or\n    ccs_procedure_category in\n           (select distinct ccs\n            from tuva.terminology.specialty_cohort\n\t    where specialty_cohort = 'Surgery/Gynecology' )\n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Medicine' cohort\nmedicine as (\nselect distinct encounter_id\nfrom tuva.readmissions.diagnosis_ccs\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs_diagnosis_category in\n           (select distinct ccs\n            from tuva.terminology.specialty_cohort\n\t    where specialty_cohort = 'Medicine' )\n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Cardiorespiratory' cohort\ncardiorespiratory as (\nselect distinct encounter_id\nfrom tuva.readmissions.diagnosis_ccs\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs_diagnosis_category in\n           (select distinct ccs\n            from tuva.terminology.specialty_cohort\n\t    where specialty_cohort = 'Cardiorespiratory' )    \n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Cardiovascular' cohort\ncardiovascular as (\nselect distinct encounter_id\nfrom tuva.readmissions.diagnosis_ccs\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs_diagnosis_category in\n           (select distinct ccs\n            from tuva.terminology.specialty_cohort\n\t    where specialty_cohort = 'Cardiovascular' )    \n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Neurology' cohort\nneurology as (\nselect distinct encounter_id\nfrom tuva.readmissions.diagnosis_ccs\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs_diagnosis_category in\n           (select distinct ccs\n            from tuva.terminology.specialty_cohort\n\t    where specialty_cohort = 'Neurology' )    \n),\n\n\n-- All encounter_ids that have an associated cohort listed\n-- with their corresponding cohort\nall_cohorts as (\nselect encounter_id, 'Surgery/Gynecology' as specialty_cohort\nfrom surgery_gynecology\nunion\nselect encounter_id, 'Medicine' as specialty_cohort\nfrom medicine\nunion\nselect encounter_id, 'Cardiorespiratory' as specialty_cohort\nfrom cardiorespiratory\nunion\nselect encounter_id, 'Cardiovascular' as specialty_cohort\nfrom cardiovascular\nunion\nselect encounter_id, 'Neurology' as specialty_cohort\nfrom neurology\n),\n\n\n-- Assign a specialty cohort to ALL encounters. If an encounter\n-- does not belong to any specialty cohort according to the\n-- rules above, then it is assigned to the 'Medicine' cohort\n-- by default\ncohorts_for_all_encounters as (\nselect\n    aa.encounter_id,\n    case\n        when bb.specialty_cohort is not null then bb.specialty_cohort\n\telse 'Medicine'\n    end as specialty_cohort\nfrom tuva.readmissions.stg_encounter aa\n     left join all_cohorts bb on aa.encounter_id = bb.encounter_id\n)\n\n\n\nselect *\nfrom cohorts_for_all_encounters", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.encounter_specialty_cohort"}, "model.readmissions.readmissions__exclusion": {"raw_sql": "-- Here we list encounter_ids that are excluded\r\n-- from being index admissions because they\r\n-- belong to one of these categories:\r\n--       [1] Medical Treatment of Cancer\r\n--       [2] Rehabilitation\r\n--       [3] Psychiatric\r\n\r\n\r\n{{ config(materialized='view'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n-- encounter_ids for encounters that should be\r\n-- excluded because they belong to one of the\r\n-- exclusion categories\r\nwith exclusions as (\r\nselect distinct encounter_id\r\nfrom {{ ref('readmissions__diagnosis_ccs') }}\r\nwhere ccs_diagnosis_category in\r\n    (select distinct ccs_diagnosis_category\r\n     from {{ ref('terminology__exclusion_ccs_diagnosis_category') }} )\r\n)\r\n\r\n\r\nselect *\r\nfrom exclusions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__exclusion_ccs_diagnosis_category"]}, "config": {"enabled": true, "alias": "exclusion", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__exclusion"], "unique_id": "model.readmissions.readmissions__exclusion", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__exclusion.sql", "original_file_path": "models\\intermediate\\readmissions__exclusion.sql", "name": "readmissions__exclusion", "alias": "exclusion", "checksum": {"name": "sha256", "checksum": "c47c86b0bfeaaf96bbeecc171e542221e6354fc841788d0e3dfa0c1600651190"}, "tags": ["readmissions"], "refs": [["readmissions__diagnosis_ccs"], ["terminology__exclusion_ccs_diagnosis_category"]], "sources": [], "metrics": [], "description": "This model lists all encounters that are excluded from being index admissions because they belong to one of the exclusion categories.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\intermediate\\readmissions__exclusion.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1670340076.193685, "compiled_sql": "-- Here we list encounter_ids that are excluded\n-- from being index admissions because they\n-- belong to one of these categories:\n--       [1] Medical Treatment of Cancer\n--       [2] Rehabilitation\n--       [3] Psychiatric\n\n\n\n\n\n-- encounter_ids for encounters that should be\n-- excluded because they belong to one of the\n-- exclusion categories\nwith exclusions as (\nselect distinct encounter_id\nfrom tuva.readmissions.diagnosis_ccs\nwhere ccs_diagnosis_category in\n    (select distinct ccs_diagnosis_category\n     from tuva.terminology.exclusion_ccs_diagnosis_category )\n)\n\n\nselect *\nfrom exclusions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.exclusion"}, "model.readmissions.readmissions__index_admission": {"raw_sql": "-- Here we list all index admissions for the hospital wide readmissions\r\n-- measure.\r\n-- These represent encounter_ids that meet the requirements to be an\r\n-- index admission for the HWR measure.\r\n-- These are the requirements for a hospitalization to be an index admission\r\n-- for the HWR measure:\r\n--\r\n--     Time Requirement: The discharge data must be at least 30 days\r\n--                       earlier than the last dischareg date available\r\n--                       in the dataset.\r\n-- \r\n--     Discharge Requirements: The patient must not be discharged to another\r\n--                             acute care hospital; the patient must not have\r\n--                             left against medical advice; and the patient\r\n--                             must be alive at discharge.\r\n--\r\n--     Diagnosis Requirements: Exclude encounters where based on the CCS\r\n--     (exclusions)            diagnosis category we know the encounter was\r\n--                             for medical treatment of cancer, rehabilitation,\r\n--                             or psychiatric reasons.\r\n\r\n\r\n{{ config(materialized='view'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n\r\n\r\nselect distinct encounter_id\r\nfrom {{ ref('readmissions__stg_encounter') }}\r\nwhere \r\n    encounter_id in (select *\r\n\t             from {{ ref('readmissions__index_time_requirement') }} )\r\n    and\r\n    encounter_id in (select *\r\n\t             from {{ ref('readmissions__index_discharge_requirement') }} )\r\n    and\r\n    encounter_id not in (select *\r\n\t                 from {{ ref('readmissions__exclusion') }} )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__index_time_requirement", "model.readmissions.readmissions__index_discharge_requirement", "model.readmissions.readmissions__exclusion"]}, "config": {"enabled": true, "alias": "index_admission", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__index_admission"], "unique_id": "model.readmissions.readmissions__index_admission", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__index_admission.sql", "original_file_path": "models\\intermediate\\readmissions__index_admission.sql", "name": "readmissions__index_admission", "alias": "index_admission", "checksum": {"name": "sha256", "checksum": "507be087262714f347e4f9dfc3f4a3f8e69b42c16c4eba1f5647f79d8f02ba52"}, "tags": ["readmissions"], "refs": [["readmissions__stg_encounter"], ["readmissions__index_time_requirement"], ["readmissions__index_discharge_requirement"], ["readmissions__exclusion"]], "sources": [], "metrics": [], "description": "This model lists all index admissions for the hospital wide readmissions measure. These represent encounter_ids that meet the requirements to be an index admission for the HWR measure.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\intermediate\\readmissions__index_admission.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1670340076.1982844, "compiled_sql": "-- Here we list all index admissions for the hospital wide readmissions\n-- measure.\n-- These represent encounter_ids that meet the requirements to be an\n-- index admission for the HWR measure.\n-- These are the requirements for a hospitalization to be an index admission\n-- for the HWR measure:\n--\n--     Time Requirement: The discharge data must be at least 30 days\n--                       earlier than the last dischareg date available\n--                       in the dataset.\n-- \n--     Discharge Requirements: The patient must not be discharged to another\n--                             acute care hospital; the patient must not have\n--                             left against medical advice; and the patient\n--                             must be alive at discharge.\n--\n--     Diagnosis Requirements: Exclude encounters where based on the CCS\n--     (exclusions)            diagnosis category we know the encounter was\n--                             for medical treatment of cancer, rehabilitation,\n--                             or psychiatric reasons.\n\n\n\n\n\n\n\nselect distinct encounter_id\nfrom tuva.readmissions.stg_encounter\nwhere \n    encounter_id in (select *\n\t             from tuva.readmissions.index_time_requirement )\n    and\n    encounter_id in (select *\n\t             from tuva.readmissions.index_discharge_requirement )\n    and\n    encounter_id not in (select *\n\t                 from tuva.readmissions.exclusion )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.index_admission"}, "model.readmissions.readmissions__index_discharge_requirement": {"raw_sql": "-- Here we list encounter_ids that meet\r\n-- the discharge_disposition_code requirements to be an\r\n-- index admission:\r\n--    *** Must NOT be discharged to another acute care hospital\r\n--    *** Must NOT have left against medical advice\r\n--    *** Patient must be alive at discharge\r\n\r\n\r\n{{ config(materialized='view'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n\r\n\r\n-- Encounters where the patient is discharged to\r\n-- another acute care hospital\r\n-- (discharge_disposition_code = '02', which is:\r\n-- 'Discharged/transferred to other short term\r\n--  general hospital for inpatient care.' )\r\nwith acute_care_discharge as (\r\nselect encounter_id\r\nfrom {{ ref('readmissions__stg_encounter') }}\r\nwhere discharge_disposition_code = '02'\r\n),\r\n\r\n\r\n-- Encounters where the patient left against medical advice\r\nagainst_medical_advice as (\r\nselect encounter_id\r\nfrom {{ ref('readmissions__stg_encounter') }}\r\nwhere discharge_disposition_code = '07'   \r\n),\r\n\r\n\r\n-- Encounters where patient died\r\ndied as (\r\nselect encounter_id\r\nfrom {{ ref('readmissions__stg_encounter') }}\r\nwhere discharge_disposition_code = '20'   \r\n),\r\n\r\n\r\n-- Union of all invalid discharges\r\nall_invalid_discharges as (\r\nselect encounter_id from acute_care_discharge\r\nunion\r\nselect encounter_id from against_medical_advice\r\nunion\r\nselect encounter_id from died\r\n)\r\n\r\n\r\n-- All discharges that meet the discharge_disposition_code\r\n-- requirements to be an index admission\r\nselect encounter_id\r\nfrom {{ ref('readmissions__stg_encounter') }}\r\nwhere encounter_id not in (select * from all_invalid_discharges)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter"]}, "config": {"enabled": true, "alias": "index_discharge_requirement", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__index_discharge_requirement"], "unique_id": "model.readmissions.readmissions__index_discharge_requirement", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__index_discharge_requirement.sql", "original_file_path": "models\\intermediate\\readmissions__index_discharge_requirement.sql", "name": "readmissions__index_discharge_requirement", "alias": "index_discharge_requirement", "checksum": {"name": "sha256", "checksum": "f9f0d2260de976e73b50966e298485d241ca12091300ee482bf8dd58ae9a0b9c"}, "tags": ["readmissions"], "refs": [["readmissions__stg_encounter"], ["readmissions__stg_encounter"], ["readmissions__stg_encounter"], ["readmissions__stg_encounter"]], "sources": [], "metrics": [], "description": "This model lists all encounters that meet the discharge disposition requirement to be an index admission.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\intermediate\\readmissions__index_discharge_requirement.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1670340076.1982844, "compiled_sql": "-- Here we list encounter_ids that meet\n-- the discharge_disposition_code requirements to be an\n-- index admission:\n--    *** Must NOT be discharged to another acute care hospital\n--    *** Must NOT have left against medical advice\n--    *** Patient must be alive at discharge\n\n\n\n\n\n\n\n-- Encounters where the patient is discharged to\n-- another acute care hospital\n-- (discharge_disposition_code = '02', which is:\n-- 'Discharged/transferred to other short term\n--  general hospital for inpatient care.' )\nwith acute_care_discharge as (\nselect encounter_id\nfrom tuva.readmissions.stg_encounter\nwhere discharge_disposition_code = '02'\n),\n\n\n-- Encounters where the patient left against medical advice\nagainst_medical_advice as (\nselect encounter_id\nfrom tuva.readmissions.stg_encounter\nwhere discharge_disposition_code = '07'   \n),\n\n\n-- Encounters where patient died\ndied as (\nselect encounter_id\nfrom tuva.readmissions.stg_encounter\nwhere discharge_disposition_code = '20'   \n),\n\n\n-- Union of all invalid discharges\nall_invalid_discharges as (\nselect encounter_id from acute_care_discharge\nunion\nselect encounter_id from against_medical_advice\nunion\nselect encounter_id from died\n)\n\n\n-- All discharges that meet the discharge_disposition_code\n-- requirements to be an index admission\nselect encounter_id\nfrom tuva.readmissions.stg_encounter\nwhere encounter_id not in (select * from all_invalid_discharges)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.index_discharge_requirement"}, "model.readmissions.readmissions__index_time_requirement": {"raw_sql": "-- Here we list encounter_ids that meet\r\n-- the time requirement to be an index admission:\r\n-- The discharge date must be at least 30 days\r\n-- earlier than the last discharge date available\r\n-- in the dataset.\r\n\r\n\r\n{{ config(materialized='view'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n\r\n\r\nselect encounter_id\r\nfrom {{ ref('readmissions__stg_encounter') }}\r\nwhere discharge_date <= (select max(discharge_date)\r\n                         from {{ ref('readmissions__stg_encounter') }} ) - 30", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter"]}, "config": {"enabled": true, "alias": "index_time_requirement", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__index_time_requirement"], "unique_id": "model.readmissions.readmissions__index_time_requirement", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__index_time_requirement.sql", "original_file_path": "models\\intermediate\\readmissions__index_time_requirement.sql", "name": "readmissions__index_time_requirement", "alias": "index_time_requirement", "checksum": {"name": "sha256", "checksum": "94bd0c4fcf04b455dfb27f5e0973a2a053fe0411e30cd1ecee7b38dfe92aa796"}, "tags": ["readmissions"], "refs": [["readmissions__stg_encounter"], ["readmissions__stg_encounter"]], "sources": [], "metrics": [], "description": "This model lists all encounters that meet the time requirement to be an index admission.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\intermediate\\readmissions__index_time_requirement.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1670340076.2033713, "compiled_sql": "-- Here we list encounter_ids that meet\n-- the time requirement to be an index admission:\n-- The discharge date must be at least 30 days\n-- earlier than the last discharge date available\n-- in the dataset.\n\n\n\n\n\n\n\nselect encounter_id\nfrom tuva.readmissions.stg_encounter\nwhere discharge_date <= (select max(discharge_date)\n                         from tuva.readmissions.stg_encounter ) - 30", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.index_time_requirement"}, "model.readmissions.readmissions__planned_encounter": {"raw_sql": "-- Here we list encounter_ids for all encounters\r\n-- that are planned.\r\n\r\n\r\n{{ config(materialized='view'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n-- encounter_ids for encounters that we know\r\n-- are planned because they had a procedure category\r\n-- that is only present for planned encounters \r\nwith always_planned_px as (\r\nselect distinct encounter_id\r\nfrom {{ ref('readmissions__procedure_ccs') }}\r\nwhere ccs_procedure_category in (select distinct ccs_procedure_category\r\n              from {{ ref('terminology__always_planned_ccs_procedure_category') }} )\r\n),\r\n\r\n\r\n-- encounter_ids for encounters that we know\r\n-- are planned because they had a diagnosis category\r\n-- that is only present for planned encounters\r\nalways_planned_dx as (\r\nselect distinct encounter_id\r\nfrom {{ ref('readmissions__diagnosis_ccs') }}\r\nwhere ccs_diagnosis_category in\r\n    (select distinct ccs_diagnosis_category\r\n     from {{ ref('terminology__always_planned_ccs_diagnosis_category') }} )\r\n),\r\n\r\n\r\n-- encounter_ids for encounters that are potentially planned\r\n-- based on one of their CCS procedure categories.\r\n-- For these encounters to actually be planned, we must further\r\n-- require that they are NOT acute encounters\r\npotentially_planned_px_ccs as (\r\nselect distinct encounter_id\r\nfrom {{ ref('readmissions__procedure_ccs') }}\r\nwhere ccs_procedure_category in\r\n    (select distinct ccs_procedure_category\r\n     from {{ ref('terminology__potentially_planned_ccs_procedure_category') }} )\r\n),\r\n\r\n\r\n-- encounter_ids for encounters that are potentially planned\r\n-- based on their ICD-10-PCS procedure codes.\r\n-- For these encounters to actually be planned, we must further\r\n-- require that they are NOT acute encounters\r\npotentially_planned_px_icd_10_pcs as (\r\nselect distinct encounter_id\r\nfrom {{ ref('readmissions__procedure_ccs') }}\r\nwhere procedure_code in\r\n    (select distinct icd_10_pcs\r\n     from {{ ref('terminology__potentially_planned_icd_10_pcs') }} )\r\n),\r\n\r\n\r\n-- encounter_ids for encounters that are acute based\r\n-- on their primary diagnosis code or their CCS diagnosis category\r\nacute_encounters as (\r\nselect distinct encounter_id\r\nfrom {{ ref('readmissions__diagnosis_ccs') }}\r\nwhere\r\n    diagnosis_code in (select distinct icd_10_cm\r\n                       from {{ ref('terminology__acute_diagnosis_icd_10_cm') }} )\r\n    or\r\n    ccs_diagnosis_category in\r\n             (select distinct ccs_diagnosis_category\r\n              from {{ ref('terminology__acute_diagnosis_ccs') }} )\r\n),\r\n\r\n\r\n-- encounter_ids for encounters that are:\r\n--           [1] potentially planned, based on one of\r\n--               their CCS procedure categories or\r\n--               their ICD-10-PCS procedure codes\r\n--           [2] acute, based on their primary diagnosis code\r\n--               or their CCS diagnosis category\r\n-- These encounters are therefore confirmed to be planned\r\npotentially_planned_that_are_actually_planned as (\r\nselect *\r\nfrom potentially_planned_px_ccs\r\nwhere encounter_id not in (select * from acute_encounters)\r\nunion\r\nselect *\r\nfrom potentially_planned_px_icd_10_pcs\r\nwhere encounter_id not in (select * from acute_encounters)\r\n),\r\n\r\n\r\n-- Aggregate of all encounter_ids for planned encounters\r\nall_planned_encounters as (\r\nselect * from always_planned_px\r\nunion\r\nselect * from always_planned_dx\r\nunion\r\nselect * from potentially_planned_that_are_actually_planned\r\n)\r\n\r\n\r\n\r\nselect *\r\nfrom all_planned_encounters", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__procedure_ccs", "seed.terminology.terminology__always_planned_ccs_procedure_category", "model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__always_planned_ccs_diagnosis_category", "model.readmissions.readmissions__procedure_ccs", "seed.terminology.terminology__potentially_planned_ccs_procedure_category", "model.readmissions.readmissions__procedure_ccs", "seed.terminology.terminology__potentially_planned_icd_10_pcs", "model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__acute_diagnosis_icd_10_cm", "seed.terminology.terminology__acute_diagnosis_ccs"]}, "config": {"enabled": true, "alias": "planned_encounter", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__planned_encounter"], "unique_id": "model.readmissions.readmissions__planned_encounter", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__planned_encounter.sql", "original_file_path": "models\\intermediate\\readmissions__planned_encounter.sql", "name": "readmissions__planned_encounter", "alias": "planned_encounter", "checksum": {"name": "sha256", "checksum": "22093a268edb9350b10fb6a44b31e06297a187f3f0cde3f72f7644879d3e1f33"}, "tags": ["readmissions"], "refs": [["readmissions__procedure_ccs"], ["terminology__always_planned_ccs_procedure_category"], ["readmissions__diagnosis_ccs"], ["terminology__always_planned_ccs_diagnosis_category"], ["readmissions__procedure_ccs"], ["terminology__potentially_planned_ccs_procedure_category"], ["readmissions__procedure_ccs"], ["terminology__potentially_planned_icd_10_pcs"], ["readmissions__diagnosis_ccs"], ["terminology__acute_diagnosis_icd_10_cm"], ["terminology__acute_diagnosis_ccs"]], "sources": [], "metrics": [], "description": "This model gives a list of all encounter_ids that were planned encounters.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\intermediate\\readmissions__planned_encounter.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1670340076.2080536, "compiled_sql": "-- Here we list encounter_ids for all encounters\n-- that are planned.\n\n\n\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a procedure category\n-- that is only present for planned encounters \nwith always_planned_px as (\nselect distinct encounter_id\nfrom tuva.readmissions.procedure_ccs\nwhere ccs_procedure_category in (select distinct ccs_procedure_category\n              from tuva.terminology.always_planned_ccs_procedure_category )\n),\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a diagnosis category\n-- that is only present for planned encounters\nalways_planned_dx as (\nselect distinct encounter_id\nfrom tuva.readmissions.diagnosis_ccs\nwhere ccs_diagnosis_category in\n    (select distinct ccs_diagnosis_category\n     from tuva.terminology.always_planned_ccs_diagnosis_category )\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on one of their CCS procedure categories.\n-- For these encounters to actually be planned, we must further\n-- require that they are NOT acute encounters\npotentially_planned_px_ccs as (\nselect distinct encounter_id\nfrom tuva.readmissions.procedure_ccs\nwhere ccs_procedure_category in\n    (select distinct ccs_procedure_category\n     from tuva.terminology.potentially_planned_ccs_procedure_category )\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on their ICD-10-PCS procedure codes.\n-- For these encounters to actually be planned, we must further\n-- require that they are NOT acute encounters\npotentially_planned_px_icd_10_pcs as (\nselect distinct encounter_id\nfrom tuva.readmissions.procedure_ccs\nwhere procedure_code in\n    (select distinct icd_10_pcs\n     from tuva.terminology.potentially_planned_icd_10_pcs )\n),\n\n\n-- encounter_ids for encounters that are acute based\n-- on their primary diagnosis code or their CCS diagnosis category\nacute_encounters as (\nselect distinct encounter_id\nfrom tuva.readmissions.diagnosis_ccs\nwhere\n    diagnosis_code in (select distinct icd_10_cm\n                       from tuva.terminology.acute_diagnosis_icd_10_cm )\n    or\n    ccs_diagnosis_category in\n             (select distinct ccs_diagnosis_category\n              from tuva.terminology.acute_diagnosis_ccs )\n),\n\n\n-- encounter_ids for encounters that are:\n--           [1] potentially planned, based on one of\n--               their CCS procedure categories or\n--               their ICD-10-PCS procedure codes\n--           [2] acute, based on their primary diagnosis code\n--               or their CCS diagnosis category\n-- These encounters are therefore confirmed to be planned\npotentially_planned_that_are_actually_planned as (\nselect *\nfrom potentially_planned_px_ccs\nwhere encounter_id not in (select * from acute_encounters)\nunion\nselect *\nfrom potentially_planned_px_icd_10_pcs\nwhere encounter_id not in (select * from acute_encounters)\n),\n\n\n-- Aggregate of all encounter_ids for planned encounters\nall_planned_encounters as (\nselect * from always_planned_px\nunion\nselect * from always_planned_dx\nunion\nselect * from potentially_planned_that_are_actually_planned\n)\n\n\n\nselect *\nfrom all_planned_encounters", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.planned_encounter"}, "model.readmissions.readmissions__primary_diagnosis_count": {"raw_sql": "-- Every encounter should have one and only one primary\r\n-- diagnosis. A potential data quality problem would\r\n-- be to have encounters that have no primary diagnosis\r\n-- or multiple primary diagnoses.\r\n-- Here we list the count of primary diagnoses associated\r\n-- with each encounter in the stg_diagnosis model.\r\n\r\n\r\n{{ config(materialized='view'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n\r\n-- Here we list the primary diagnosis count for every\r\n-- encounter_id in the stg_diagnosis model that has\r\n-- at least one primary diagnosis\r\nwith primary_diagnosis_count_greater_than_zero as (\r\nselect\r\n    encounter_id,\r\n    count(*) as primary_dx_count\r\nfrom {{ ref('readmissions__stg_diagnosis') }}\r\nwhere diagnosis_rank = 1\r\ngroup by encounter_id\r\n),\r\n\r\n\r\n-- Here we list all distinct encounter_ids in the\r\n-- stg_diagnosis model\r\nall_encounter_ids as (\r\nselect distinct encounter_id\r\nfrom {{ ref('readmissions__stg_diagnosis') }}\r\n),\r\n\r\n\r\n-- Here we list the primary diagnosis count for every\r\n-- encounter_id in the stg_diagnosis model.\r\n-- The primary_dx_count can be any\r\n-- nonnegative integer: {0,1,2,3,...}\r\nall_primary_diagnosis_count as (\r\nselect\r\n    aa.encounter_id,\r\n    case\r\n        when bb.primary_dx_count is null then 0\r\n\telse bb.primary_dx_count\r\n    end as primary_dx_count\r\nfrom\r\n    all_encounter_ids aa\r\n    left join primary_diagnosis_count_greater_than_zero bb\r\n    on aa.encounter_id = bb.encounter_id\r\n)\r\n\r\n\r\n\r\nselect *\r\nfrom all_primary_diagnosis_count", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_diagnosis", "model.readmissions.readmissions__stg_diagnosis"]}, "config": {"enabled": true, "alias": "primary_diagnosis_count", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__primary_diagnosis_count"], "unique_id": "model.readmissions.readmissions__primary_diagnosis_count", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__primary_diagnosis_count.sql", "original_file_path": "models\\intermediate\\readmissions__primary_diagnosis_count.sql", "name": "readmissions__primary_diagnosis_count", "alias": "primary_diagnosis_count", "checksum": {"name": "sha256", "checksum": "964eb076c927d81dc3d1ad303ae28f5896ebb22de421b044468a4bcc4852ee66"}, "tags": ["readmissions"], "refs": [["readmissions__stg_diagnosis"], ["readmissions__stg_diagnosis"]], "sources": [], "metrics": [], "description": "This model includes a count of primary diagnoses related to each encounter_id in the stg_diagnosis model. In theory, each encounter_id should only have a single primary diagnosis, but this model checks how many primary diagnoses each encounter_id has in the dataset.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_dx_count": {"name": "primary_dx_count", "description": "A positive integer giving the count of primary diagnoses for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\intermediate\\readmissions__primary_diagnosis_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1670340076.2080536, "compiled_sql": "-- Every encounter should have one and only one primary\n-- diagnosis. A potential data quality problem would\n-- be to have encounters that have no primary diagnosis\n-- or multiple primary diagnoses.\n-- Here we list the count of primary diagnoses associated\n-- with each encounter in the stg_diagnosis model.\n\n\n\n\n\n\n-- Here we list the primary diagnosis count for every\n-- encounter_id in the stg_diagnosis model that has\n-- at least one primary diagnosis\nwith primary_diagnosis_count_greater_than_zero as (\nselect\n    encounter_id,\n    count(*) as primary_dx_count\nfrom tuva.readmissions.stg_diagnosis\nwhere diagnosis_rank = 1\ngroup by encounter_id\n),\n\n\n-- Here we list all distinct encounter_ids in the\n-- stg_diagnosis model\nall_encounter_ids as (\nselect distinct encounter_id\nfrom tuva.readmissions.stg_diagnosis\n),\n\n\n-- Here we list the primary diagnosis count for every\n-- encounter_id in the stg_diagnosis model.\n-- The primary_dx_count can be any\n-- nonnegative integer: {0,1,2,3,...}\nall_primary_diagnosis_count as (\nselect\n    aa.encounter_id,\n    case\n        when bb.primary_dx_count is null then 0\n\telse bb.primary_dx_count\n    end as primary_dx_count\nfrom\n    all_encounter_ids aa\n    left join primary_diagnosis_count_greater_than_zero bb\n    on aa.encounter_id = bb.encounter_id\n)\n\n\n\nselect *\nfrom all_primary_diagnosis_count", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.primary_diagnosis_count"}, "model.readmissions.readmissions__procedure_ccs": {"raw_sql": "-- Here we map every procedure code to its corresponding\r\n-- CCS procedure category.\r\n-- This model may list more than one CCS procedure category\r\n-- per encounter_id because different procedures associated with the\r\n-- encounter (different rows on the stg_procedure model) may have\r\n-- different associated CCS procedure categories.\r\n\r\n\r\n{{ config(materialized='view'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n\r\n\r\nselect\r\n    aa.encounter_id,\r\n    aa.procedure_code,\r\n    case\r\n        when bb.icd_10_pcs is null then 0\r\n\telse 1\r\n    end as valid_icd_10_pcs_flag,\r\n    cc.ccs_procedure_category\r\nfrom\r\n    {{ ref('readmissions__stg_procedure') }} aa\r\n    left join {{ ref('terminology__icd_10_pcs') }} bb\r\n    on aa.procedure_code = bb.icd_10_pcs\r\n    left join {{ ref('terminology__icd_10_pcs_to_ccs') }} cc\r\n    on aa.procedure_code = cc.icd_10_pcs", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_procedure", "seed.terminology.terminology__icd_10_pcs", "seed.terminology.terminology__icd_10_pcs_to_ccs"]}, "config": {"enabled": true, "alias": "procedure_ccs", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__procedure_ccs"], "unique_id": "model.readmissions.readmissions__procedure_ccs", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__procedure_ccs.sql", "original_file_path": "models\\intermediate\\readmissions__procedure_ccs.sql", "name": "readmissions__procedure_ccs", "alias": "procedure_ccs", "checksum": {"name": "sha256", "checksum": "cfecf4714bc426349f4d173679e04e1b2b956555b231a5a2cbc51a2e1274d911"}, "tags": ["readmissions"], "refs": [["readmissions__stg_procedure"], ["terminology__icd_10_pcs"], ["terminology__icd_10_pcs_to_ccs"]], "sources": [], "metrics": [], "description": "This model includes all procedures from the stg_procedure model and adds a valid_icd_10_pcs_flag to indicate if the ICD-10-PCS code for this procedure is valid. We also add the CCS procedure category associated with the procedure", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code": {"name": "procedure_code", "description": "An ICD-10-PCS code associated with this encounter_id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_icd_10_pcs_flag": {"name": "valid_icd_10_pcs_flag", "description": "A flag indicating if the ICD-10-PCS procedure code given is valid", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ccs_procedure_category": {"name": "ccs_procedure_category", "description": "The CCS code associated with the given ICD-10-PCS procedure", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\intermediate\\readmissions__procedure_ccs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1670340076.2132869, "compiled_sql": "-- Here we map every procedure code to its corresponding\n-- CCS procedure category.\n-- This model may list more than one CCS procedure category\n-- per encounter_id because different procedures associated with the\n-- encounter (different rows on the stg_procedure model) may have\n-- different associated CCS procedure categories.\n\n\n\n\n\n\n\nselect\n    aa.encounter_id,\n    aa.procedure_code,\n    case\n        when bb.icd_10_pcs is null then 0\n\telse 1\n    end as valid_icd_10_pcs_flag,\n    cc.ccs_procedure_category\nfrom\n    tuva.readmissions.stg_procedure aa\n    left join tuva.terminology.icd_10_pcs bb\n    on aa.procedure_code = bb.icd_10_pcs\n    left join tuva.terminology.icd_10_pcs_to_ccs cc\n    on aa.procedure_code = cc.icd_10_pcs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.procedure_ccs"}, "model.readmissions.readmissions__readmission_crude": {"raw_sql": "-- Here we calculate readmissions using all encounters\r\n-- that have valid admit and discharge dates and no overlap.\r\n-- This is meant to give a crude sense of the readmission\r\n-- rate without taking into account all the CMS HWR logic.\r\n\r\n\r\n{{ config(materialize='table'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True)))  }}\r\n\r\n\r\n\r\nwith encounter_info as (\r\nselect\r\n    encounter_id,\r\n    patient_id,\r\n    admit_date,\r\n    discharge_date\r\nfrom {{ ref('readmissions__stg_encounter') }}\r\nwhere\r\n    admit_date is not null\r\n    and\r\n    discharge_date is not null\r\n    and\r\n    admit_date <= discharge_date\r\n    and\r\n    encounter_id not in (select distinct encounter_id_A\r\n\t                         from {{ ref('readmissions__encounter_overlap') }} )\r\n    and\r\n    encounter_id not in (select distinct encounter_id_B\r\n\t                         from {{ ref('readmissions__encounter_overlap') }} )\r\n),\r\n\r\n\r\nencounter_sequence as (\r\nselect\r\n    encounter_id,\r\n    patient_id,\r\n    admit_date,\r\n    discharge_date,\r\n    row_number() over(\r\n        partition by patient_id order by admit_date, discharge_date\r\n    ) as encounter_sequence    \r\nfrom encounter_info\r\n),\r\n\r\n\r\nreadmission_calc as (\r\nselect\r\n    aa.encounter_id,\r\n    aa.patient_id,\r\n    aa.admit_date,\r\n    aa.discharge_date,\r\n    case\r\n        when bb.encounter_id is not null then 1\r\n\telse 0\r\n    end as had_readmission_flag,\r\n    bb.admit_date - aa.discharge_date as days_to_readmit,\r\n    case\r\n        when (bb.admit_date - aa.discharge_date) <= 30  then 1\r\n\telse 0\r\n    end as readmit_30_flag\r\nfrom encounter_sequence aa left join encounter_sequence bb\r\n     on aa.patient_id = bb.patient_id\r\n     and aa.encounter_sequence + 1 = bb.encounter_sequence\r\n)\r\n\r\n\r\n\r\nselect *\r\nfrom readmission_calc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__encounter_overlap"]}, "config": {"enabled": true, "alias": "readmission_crude", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "materialize": "table", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__readmission_crude"], "unique_id": "model.readmissions.readmissions__readmission_crude", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__readmission_crude.sql", "original_file_path": "models\\intermediate\\readmissions__readmission_crude.sql", "name": "readmissions__readmission_crude", "alias": "readmission_crude", "checksum": {"name": "sha256", "checksum": "9e027b545361d01ed290b633cc465a07c7e78c16964a8d2bbcf7477dbb95fd1b"}, "tags": ["readmissions"], "refs": [["readmissions__stg_encounter"], ["readmissions__encounter_overlap"], ["readmissions__encounter_overlap"]], "sources": [], "metrics": [], "description": "This model lists all encounters and whether they had a 'crude' readmission, meaning that the encounter had a hospitalization after discharge, without regard to all CMS readmission logic.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_date": {"name": "admit_date", "description": "The date of admission for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "had_readmission_flag": {"name": "had_readmission_flag", "description": "A flag to indicate whether the encounter had a readmission any number of days after discharge", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_to_readmit": {"name": "days_to_readmit", "description": "An integer to indicate the number of days to readmission", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmit_30_flag": {"name": "readmit_30_flag", "description": "A flag to indicate whether the encounter had a 30-day readmission", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\intermediate\\readmissions__readmission_crude.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialize": "table", "enabled": true}, "created_at": 1670340076.2183795, "compiled_sql": "-- Here we calculate readmissions using all encounters\n-- that have valid admit and discharge dates and no overlap.\n-- This is meant to give a crude sense of the readmission\n-- rate without taking into account all the CMS HWR logic.\n\n\n\n\n\n\nwith encounter_info as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date\nfrom tuva.readmissions.stg_encounter\nwhere\n    admit_date is not null\n    and\n    discharge_date is not null\n    and\n    admit_date <= discharge_date\n    and\n    encounter_id not in (select distinct encounter_id_A\n\t                         from tuva.readmissions.encounter_overlap )\n    and\n    encounter_id not in (select distinct encounter_id_B\n\t                         from tuva.readmissions.encounter_overlap )\n),\n\n\nencounter_sequence as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_sequence    \nfrom encounter_info\n),\n\n\nreadmission_calc as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    case\n        when bb.encounter_id is not null then 1\n\telse 0\n    end as had_readmission_flag,\n    bb.admit_date - aa.discharge_date as days_to_readmit,\n    case\n        when (bb.admit_date - aa.discharge_date) <= 30  then 1\n\telse 0\n    end as readmit_30_flag\nfrom encounter_sequence aa left join encounter_sequence bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_sequence + 1 = bb.encounter_sequence\n)\n\n\n\nselect *\nfrom readmission_calc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.readmission_crude"}, "model.readmissions.readmissions__stg_diagnosis": {"raw_sql": "-- Staging model for the input layer:\r\n-- stg_diagnosis input layer model.\r\n-- This contains one row for every unique diagnosis each patient has.\r\n\r\n\r\n{{ config(materialize='view'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n\r\nselect\r\n    cast(encounter_id as varchar) as encounter_id,\r\n    cast(code as varchar) as diagnosis_code,\r\n    cast(diagnosis_rank as integer) as diagnosis_rank\r\n\r\nfrom {{var('condition')}}\r\nwhere code_type = 'icd-10-cm' and condition_type = 'discharge diagnosis'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions_input.condition", "model.readmissions_input.condition"]}, "config": {"enabled": true, "alias": "stg_diagnosis", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "materialize": "view", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "staging", "readmissions__stg_diagnosis"], "unique_id": "model.readmissions.readmissions__stg_diagnosis", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "staging\\readmissions__stg_diagnosis.sql", "original_file_path": "models\\staging\\readmissions__stg_diagnosis.sql", "name": "readmissions__stg_diagnosis", "alias": "stg_diagnosis", "checksum": {"name": "sha256", "checksum": "cf98c5a6b6c6843b9a1b7005adc731d939b2cd6af0461b9a53f40aa7adaec77a"}, "tags": ["readmissions"], "refs": [["condition"], ["condition"]], "sources": [], "metrics": [], "description": "This is a staging table for the input layer. Each row represents a unique diagnosis a patient got in an encouter. All diagnoses available in the input data set are present here.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code": {"name": "diagnosis_code", "description": "An ICD-10-CM diagnosis code associated with this encounter_id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_rank": {"name": "diagnosis_rank", "description": "A positive integer giving the diagnosis ranking for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\staging\\readmissions__stg_diagnosis.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialize": "view", "enabled": true}, "created_at": 1670340076.233436, "compiled_sql": "-- Staging model for the input layer:\n-- stg_diagnosis input layer model.\n-- This contains one row for every unique diagnosis each patient has.\n\n\n\n\n\n\nselect\n    cast(encounter_id as varchar) as encounter_id,\n    cast(code as varchar) as diagnosis_code,\n    cast(diagnosis_rank as integer) as diagnosis_rank\n\nfrom tuva.readmissions_input.condition\nwhere code_type = 'icd-10-cm' and condition_type = 'discharge diagnosis'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.stg_diagnosis"}, "model.readmissions.readmissions__stg_encounter": {"raw_sql": "-- Staging model for the input layer:\r\n-- stg_encounter input layer model.\r\n-- This contains one row for every unique encounter in the dataset.\r\n\r\n\r\n{{ config(materialize='view'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n\r\nselect\r\n    cast(encounter_id as varchar) as encounter_id,\r\n    cast(patient_id as varchar) as patient_id,\r\n    cast(encounter_start_date as date) as admit_date,\r\n    cast(encounter_end_date as date) as discharge_date,\r\n    cast(discharge_disposition_code as varchar) as discharge_disposition_code,\r\n    cast(facility_npi as varchar) as facility_npi,\r\n    cast(ms_drg_code as varchar) as ms_drg_code\r\n    \r\nfrom {{ var('encounter') }}\r\nwhere encounter_type = 'acute inpatient'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions_input.encounter", "model.readmissions_input.encounter"]}, "config": {"enabled": true, "alias": "stg_encounter", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "materialize": "view", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "staging", "readmissions__stg_encounter"], "unique_id": "model.readmissions.readmissions__stg_encounter", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "staging\\readmissions__stg_encounter.sql", "original_file_path": "models\\staging\\readmissions__stg_encounter.sql", "name": "readmissions__stg_encounter", "alias": "stg_encounter", "checksum": {"name": "sha256", "checksum": "e58bf7e8a5b55de30ca3fbf5919d3741ec7d900907db36b1c458105a451068d2"}, "tags": ["readmissions"], "refs": [["encounter"], ["encounter"]], "sources": [], "metrics": [], "description": "This is a staging table for the input layer. Each row represents a unique acute inpatient encounter.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_date": {"name": "admit_date", "description": "The date of admission for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "The date of discharge for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_status_code": {"name": "discharge_status_code", "description": "The valid 2-digit discharge status for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "facility": {"name": "facility", "description": "A name or ID for the facility where the inpatient visit occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ms_drg": {"name": "ms_drg", "description": "The MS-DRG associted with the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\staging\\readmissions__stg_encounter.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialize": "view", "enabled": true}, "created_at": 1670340076.2335744, "compiled_sql": "-- Staging model for the input layer:\n-- stg_encounter input layer model.\n-- This contains one row for every unique encounter in the dataset.\n\n\n\n\n\n\nselect\n    cast(encounter_id as varchar) as encounter_id,\n    cast(patient_id as varchar) as patient_id,\n    cast(encounter_start_date as date) as admit_date,\n    cast(encounter_end_date as date) as discharge_date,\n    cast(discharge_disposition_code as varchar) as discharge_disposition_code,\n    cast(facility_npi as varchar) as facility_npi,\n    cast(ms_drg_code as varchar) as ms_drg_code\n    \nfrom tuva.readmissions_input.encounter\nwhere encounter_type = 'acute inpatient'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.stg_encounter"}, "model.readmissions.readmissions__stg_patient": {"raw_sql": "-- Staging model for the input layer:\r\n-- stg_patient input layer model.\r\n-- This contains one row for every unique patient in the dataset.\r\n\r\n\r\n{{ config(materialize='view'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n\r\nselect\r\n    cast(patient_id as varchar) as patient_id,\r\n    cast(gender as varchar) as gender,\r\n    cast(birth_date as date) as birth_date\r\n\r\nfrom {{ var('patient') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions_input.patient", "model.readmissions_input.patient"]}, "config": {"enabled": true, "alias": "stg_patient", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "materialize": "view", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "staging", "readmissions__stg_patient"], "unique_id": "model.readmissions.readmissions__stg_patient", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "staging\\readmissions__stg_patient.sql", "original_file_path": "models\\staging\\readmissions__stg_patient.sql", "name": "readmissions__stg_patient", "alias": "stg_patient", "checksum": {"name": "sha256", "checksum": "962af4daa19105b7294c6585eb1f4c8e92c4b8dbf072f2976aed87db13643017"}, "tags": ["readmissions"], "refs": [["patient"], ["patient"]], "sources": [], "metrics": [], "description": "This is a staging table for the input layer. Each row represents a unique patient.", "columns": {"patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "The patient's gender", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "The date of birth of the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\staging\\readmissions__stg_patient.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialize": "view", "enabled": true}, "created_at": 1670340076.2392719, "compiled_sql": "-- Staging model for the input layer:\n-- stg_patient input layer model.\n-- This contains one row for every unique patient in the dataset.\n\n\n\n\n\n\nselect\n    cast(patient_id as varchar) as patient_id,\n    cast(gender as varchar) as gender,\n    cast(birth_date as date) as birth_date\n\nfrom tuva.readmissions_input.patient", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.stg_patient"}, "model.readmissions.readmissions__stg_procedure": {"raw_sql": "-- Staging model for the input layer:\r\n-- stg_procedure input layer model.\r\n-- This contains one row for every unique procedure each patient has.\r\n\r\n\r\n{{ config(materialize='view'\r\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n\r\n\r\nselect\r\n    cast(encounter_id as varchar) as encounter_id,\r\n    cast(code as varchar) as procedure_code\r\n\r\nfrom {{ var('procedure') }}\r\nwhere code_type = 'icd-10-pcs'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions_input.condition", "model.readmissions_input.condition"]}, "config": {"enabled": true, "alias": "stg_procedure", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "materialize": "view", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "staging", "readmissions__stg_procedure"], "unique_id": "model.readmissions.readmissions__stg_procedure", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "staging\\readmissions__stg_procedure.sql", "original_file_path": "models\\staging\\readmissions__stg_procedure.sql", "name": "readmissions__stg_procedure", "alias": "stg_procedure", "checksum": {"name": "sha256", "checksum": "2063053e14414329fe84c2af9338f0189918df444da41d3a6d1172dc7e75e1c0"}, "tags": ["readmissions"], "refs": [["condition"], ["condition"]], "sources": [], "metrics": [], "description": "This is a staging table for the input layer. Each row represents a unique procedure a patient got in an encouter. All procedures available in the input data set are present here.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code": {"name": "procedure_code", "description": "An ICD-10-PCS code associated with this encounter_id", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "target\\compiled\\readmissions\\models\\staging\\readmissions__stg_procedure.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialize": "view", "enabled": true}, "created_at": 1670340076.2435036, "compiled_sql": "-- Staging model for the input layer:\n-- stg_procedure input layer model.\n-- This contains one row for every unique procedure each patient has.\n\n\n\n\n\n\nselect\n    cast(encounter_id as varchar) as encounter_id,\n    cast(code as varchar) as procedure_code\n\nfrom tuva.readmissions_input.condition\nwhere code_type = 'icd-10-pcs'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.stg_procedure"}, "seed.terminology.terminology__admit_source": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "admit_source", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"admit_source_code": "varchar", "admit_source_description": "varchar", "newborn_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__admit_source"], "unique_id": "seed.terminology.terminology__admit_source", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__admit_source.csv", "original_file_path": "terminology\\terminology__admit_source.csv", "name": "terminology__admit_source", "alias": "admit_source", "checksum": {"name": "sha256", "checksum": "392e0c1935973dbea2e96030db856a8ccfa660cbd51f45c92d51d121aa432a8b"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.2631545}, "seed.terminology.terminology__admit_type": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "admit_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"admit_type_code": "varchar", "admit_type_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__admit_type"], "unique_id": "seed.terminology.terminology__admit_type", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__admit_type.csv", "original_file_path": "terminology\\terminology__admit_type.csv", "name": "terminology__admit_type", "alias": "admit_type", "checksum": {"name": "sha256", "checksum": "0fba96cde9676541c9205364a2e2285efa0e9500507a4bcc7b790a982c9482ac"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.2682784}, "seed.terminology.terminology__bill_type": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "bill_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "data_profiling"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"bill_type_code": "varchar", "bill_type_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__bill_type"], "unique_id": "seed.terminology.terminology__bill_type", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__bill_type.csv", "original_file_path": "terminology\\terminology__bill_type.csv", "name": "terminology__bill_type", "alias": "bill_type", "checksum": {"name": "sha256", "checksum": "8b363106ed8e54488d71b8f4ccfca6e371692e836ef77b335621df6bf63b9a8a"}, "tags": ["terminology", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.2834582}, "seed.terminology.terminology__chronic_conditions": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "chronic_conditions", "schema": "terminology", "database": "tuva", "tags": ["terminology", "chronic_conditions"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"condition_id": "varchar", "condition": "varchar", "condition_column_name": "varchar", "chronic_condition_type": "varchar", "condition_category": "varchar", "additional_logic": "varchar(1000)", "claims_qualification": "varchar(1000)", "inclusion_type": "varchar", "code_system": "varchar", "code": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__chronic_conditions"], "unique_id": "seed.terminology.terminology__chronic_conditions", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__chronic_conditions.csv", "original_file_path": "terminology\\terminology__chronic_conditions.csv", "name": "terminology__chronic_conditions", "alias": "chronic_conditions", "checksum": {"name": "path", "checksum": "terminology\\terminology__chronic_conditions.csv"}, "tags": ["terminology", "chronic_conditions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.2933967}, "seed.terminology.terminology__claim_type": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "claim_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "data_profiling"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"claim_type_code": "varchar", "claim_type_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__claim_type"], "unique_id": "seed.terminology.terminology__claim_type", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__claim_type.csv", "original_file_path": "terminology\\terminology__claim_type.csv", "name": "terminology__claim_type", "alias": "claim_type", "checksum": {"name": "sha256", "checksum": "da35be4c432144ba8003d5ef8f2d815d8afce6ed215d6aa065e305ad11f7552c"}, "tags": ["terminology", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.2984855}, "seed.terminology.terminology__code_type": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "code_type", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__code_type"], "unique_id": "seed.terminology.terminology__code_type", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__code_type.csv", "original_file_path": "terminology\\terminology__code_type.csv", "name": "terminology__code_type", "alias": "code_type", "checksum": {"name": "sha256", "checksum": "5fe9aa562e036ca6f98866fe29d85c1f2351f53d00fdde631ad8dce183ce5788"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.3035772}, "seed.terminology.terminology__discharge_disposition": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "discharge_disposition", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"discharge_disposition_code": "varchar", "discharge_disposition_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__discharge_disposition"], "unique_id": "seed.terminology.terminology__discharge_disposition", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__discharge_disposition.csv", "original_file_path": "terminology\\terminology__discharge_disposition.csv", "name": "terminology__discharge_disposition", "alias": "discharge_disposition", "checksum": {"name": "sha256", "checksum": "992cf51c8d6a2dfe3d3f54e65bf618e68599ed2f48bcf75d59ee8bdd48d1aa0e"}, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.3061948, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.discharge_disposition"}, "seed.terminology.terminology__encounter_type": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "encounter_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__encounter_type"], "unique_id": "seed.terminology.terminology__encounter_type", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__encounter_type.csv", "original_file_path": "terminology\\terminology__encounter_type.csv", "name": "terminology__encounter_type", "alias": "encounter_type", "checksum": {"name": "sha256", "checksum": "d75ee477d89a9d8d679a9fcc64ce29975b9fe6eea1ad094d2e60d62e5b011c3c"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.313456}, "seed.terminology.terminology__ethnicity": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "ethnicity", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"code": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__ethnicity"], "unique_id": "seed.terminology.terminology__ethnicity", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__ethnicity.csv", "original_file_path": "terminology\\terminology__ethnicity.csv", "name": "terminology__ethnicity", "alias": "ethnicity", "checksum": {"name": "sha256", "checksum": "d23c1e3d7417d569bbb1e11cd0a493cfd60f60e231756adb2f7b6160ca2f93e6"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.3196352}, "seed.terminology.terminology__fips_county": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "fips_county", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"fips_code": "varchar", "county": "varchar", "state": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__fips_county"], "unique_id": "seed.terminology.terminology__fips_county", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__fips_county.csv", "original_file_path": "terminology\\terminology__fips_county.csv", "name": "terminology__fips_county", "alias": "fips_county", "checksum": {"name": "sha256", "checksum": "51c80da82ec1f20665fbd65379796c53f724781fa3833396cba093c89004bfb5"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.3285465}, "seed.terminology.terminology__fips_state": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "fips_state", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"fips_code": "varchar", "abbreviation": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__fips_state"], "unique_id": "seed.terminology.terminology__fips_state", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__fips_state.csv", "original_file_path": "terminology\\terminology__fips_state.csv", "name": "terminology__fips_state", "alias": "fips_state", "checksum": {"name": "sha256", "checksum": "2208d05e654084a3cff054be9aa2b340fe76e8fee9af380406ce0fa3fe592a89"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.3332756}, "seed.terminology.terminology__gender": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "gender", "schema": "terminology", "database": "tuva", "tags": ["terminology", "data_profiling"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__gender"], "unique_id": "seed.terminology.terminology__gender", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__gender.csv", "original_file_path": "terminology\\terminology__gender.csv", "name": "terminology__gender", "alias": "gender", "checksum": {"name": "sha256", "checksum": "49caad564a6d46cabcbbaa25857984aa1f7d4426ed5927989cdeddc1539d6fb6"}, "tags": ["terminology", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.339463}, "seed.terminology.terminology__hcpcs_level_2": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "hcpcs_level_2", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"hcpcs": "varchar", "seqnum": "varchar", "recid": "varchar", "long_description": "varchar(2000)", "short_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__hcpcs_level_2"], "unique_id": "seed.terminology.terminology__hcpcs_level_2", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__hcpcs_level_2.csv", "original_file_path": "terminology\\terminology__hcpcs_level_2.csv", "name": "terminology__hcpcs_level_2", "alias": "hcpcs_level_2", "checksum": {"name": "path", "checksum": "terminology\\terminology__hcpcs_level_2.csv"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.3437169}, "seed.terminology.terminology__icd_10_cm": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_cm", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_cm": "varchar", "valid_flag": "varchar", "short_description": "varchar", "long_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__icd_10_cm"], "unique_id": "seed.terminology.terminology__icd_10_cm", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__icd_10_cm.csv", "original_file_path": "terminology\\terminology__icd_10_cm.csv", "name": "terminology__icd_10_cm", "alias": "icd_10_cm", "checksum": {"name": "path", "checksum": "terminology\\terminology__icd_10_cm.csv"}, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.3505318, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_cm"}, "seed.terminology.terminology__icd_10_pcs": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_pcs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "readmissions"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "valid_flag": "varchar", "short_description": "varchar", "long_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__icd_10_pcs"], "unique_id": "seed.terminology.terminology__icd_10_pcs", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__icd_10_pcs.csv", "original_file_path": "terminology\\terminology__icd_10_pcs.csv", "name": "terminology__icd_10_pcs", "alias": "icd_10_pcs", "checksum": {"name": "path", "checksum": "terminology\\terminology__icd_10_pcs.csv"}, "tags": ["terminology", "claims_preprocessing", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.3634524, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_pcs"}, "seed.terminology.terminology__mdc": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "mdc", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"mdc_code": "varchar", "mcd_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__mdc"], "unique_id": "seed.terminology.terminology__mdc", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__mdc.csv", "original_file_path": "terminology\\terminology__mdc.csv", "name": "terminology__mdc", "alias": "mdc", "checksum": {"name": "sha256", "checksum": "c941d78a6e4de2c32b546a46f0b0c429bb209a9e1a7049a803cf8c447c73d0d6"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.3733883}, "seed.terminology.terminology__medicare_dual_eligibility": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "medicare_dual_eligibility", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"dual_status_code": "varchar", "dual_status_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__medicare_dual_eligibility"], "unique_id": "seed.terminology.terminology__medicare_dual_eligibility", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__medicare_dual_eligibility.csv", "original_file_path": "terminology\\terminology__medicare_dual_eligibility.csv", "name": "terminology__medicare_dual_eligibility", "alias": "medicare_dual_eligibility", "checksum": {"name": "sha256", "checksum": "db7415a91cd31bbf2318963aa717b319319516bdc8426e2ebb2e78db002cb58d"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.3833313}, "seed.terminology.terminology__medicare_state_fips": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "medicare_state_fips", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"fips_code": "varchar", "state": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__medicare_state_fips"], "unique_id": "seed.terminology.terminology__medicare_state_fips", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__medicare_state_fips.csv", "original_file_path": "terminology\\terminology__medicare_state_fips.csv", "name": "terminology__medicare_state_fips", "alias": "medicare_state_fips", "checksum": {"name": "sha256", "checksum": "66012b041d1956dca6bf24bc25e691d419e458b1e6b54bb13d8bf5ff802ba2d9"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.388417}, "seed.terminology.terminology__medicare_status": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "medicare_status", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"medicare_status_code": "varchar", "medicare_status_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__medicare_status"], "unique_id": "seed.terminology.terminology__medicare_status", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__medicare_status.csv", "original_file_path": "terminology\\terminology__medicare_status.csv", "name": "terminology__medicare_status", "alias": "medicare_status", "checksum": {"name": "sha256", "checksum": "2bd1a8a081fceb69bf91287c8a56c370ea1544a1fbbe12829566955012c04c97"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.393259}, "seed.terminology.terminology__ms_drg": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "ms_drg", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions", "data_profiling", "claims_preprocessing"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ms_drg_code": "varchar", "mdc_code": "varchar", "medical_surgical": "varchar", "ms_drg_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__ms_drg"], "unique_id": "seed.terminology.terminology__ms_drg", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__ms_drg.csv", "original_file_path": "terminology\\terminology__ms_drg.csv", "name": "terminology__ms_drg", "alias": "ms_drg", "checksum": {"name": "sha256", "checksum": "63740ef5cb6d40d8b4f261a59de820df7f8d80ca96989194348b1874f65861d6"}, "tags": ["terminology", "readmissions", "data_profiling", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.3983448, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.ms_drg"}, "seed.terminology.terminology__payer_type": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "payer_type", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"payer_type": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__payer_type"], "unique_id": "seed.terminology.terminology__payer_type", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__payer_type.csv", "original_file_path": "terminology\\terminology__payer_type.csv", "name": "terminology__payer_type", "alias": "payer_type", "checksum": {"name": "sha256", "checksum": "b79b79e782eb2d68211a9f375c0c1aebc9828449c51f77297e8e70c51a6827e0"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.4034288}, "seed.terminology.terminology__place_of_service": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "place_of_service", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"place_of_service_code": "varchar", "place_of_service_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__place_of_service"], "unique_id": "seed.terminology.terminology__place_of_service", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__place_of_service.csv", "original_file_path": "terminology\\terminology__place_of_service.csv", "name": "terminology__place_of_service", "alias": "place_of_service", "checksum": {"name": "sha256", "checksum": "760955a3ad21bd2c8f4257881e8f713276eda10623bb05f373634ff186ea8592"}, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.4060369}, "seed.terminology.terminology__present_on_admission": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "present_on_admission", "schema": "terminology", "database": "tuva", "tags": ["terminology", "data_profiling", "claims_preprocessing"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"present_on_admit_code": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__present_on_admission"], "unique_id": "seed.terminology.terminology__present_on_admission", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__present_on_admission.csv", "original_file_path": "terminology\\terminology__present_on_admission.csv", "name": "terminology__present_on_admission", "alias": "present_on_admission", "checksum": {"name": "sha256", "checksum": "4a0669b7aed638378b8cde6a1e4d0202071923c695ecba93cf266d7c1b206d8e"}, "tags": ["terminology", "data_profiling", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.4231942}, "seed.terminology.terminology__race": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "race", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"race_code": "varchar", "race_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__race"], "unique_id": "seed.terminology.terminology__race", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__race.csv", "original_file_path": "terminology\\terminology__race.csv", "name": "terminology__race", "alias": "race", "checksum": {"name": "sha256", "checksum": "267e1246e929209855c8128566cb1eadc21f878998bf5ee3fd36b50a76e2da2c"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.4335723}, "seed.terminology.terminology__revenue_center": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": "revenue_center", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"revenue_center_code": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__revenue_center"], "unique_id": "seed.terminology.terminology__revenue_center", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__revenue_center.csv", "original_file_path": "terminology\\terminology__revenue_center.csv", "name": "terminology__revenue_center", "alias": "revenue_center", "checksum": {"name": "sha256", "checksum": "6d630994900478a2efc0f63fa4045b387bd020cb519fac04ba16b32fb11a1647"}, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.4335723}, "seed.terminology.terminology__acute_diagnosis_ccs": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "acute_diagnosis_ccs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__acute_diagnosis_ccs"], "unique_id": "seed.terminology.terminology__acute_diagnosis_ccs", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__acute_diagnosis_ccs.csv", "original_file_path": "terminology\\readmissions\\terminology__acute_diagnosis_ccs.csv", "name": "terminology__acute_diagnosis_ccs", "alias": "acute_diagnosis_ccs", "checksum": {"name": "sha256", "checksum": "654779d4a8e08465f9037d8e544b7a4c96053a6daefaa6d7fe56496b31ef25e4"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.250292, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.acute_diagnosis_ccs"}, "seed.terminology.terminology__acute_diagnosis_icd_10_cm": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "acute_diagnosis_icd_10_cm", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_cm": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__acute_diagnosis_icd_10_cm"], "unique_id": "seed.terminology.terminology__acute_diagnosis_icd_10_cm", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__acute_diagnosis_icd_10_cm.csv", "original_file_path": "terminology\\readmissions\\terminology__acute_diagnosis_icd_10_cm.csv", "name": "terminology__acute_diagnosis_icd_10_cm", "alias": "acute_diagnosis_icd_10_cm", "checksum": {"name": "path", "checksum": "terminology\\readmissions\\terminology__acute_diagnosis_icd_10_cm.csv"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.256067, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.acute_diagnosis_icd_10_cm"}, "seed.terminology.terminology__always_planned_ccs_diagnosis_category": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "always_planned_ccs_diagnosis_category", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__always_planned_ccs_diagnosis_category"], "unique_id": "seed.terminology.terminology__always_planned_ccs_diagnosis_category", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__always_planned_ccs_diagnosis_category.csv", "original_file_path": "terminology\\readmissions\\terminology__always_planned_ccs_diagnosis_category.csv", "name": "terminology__always_planned_ccs_diagnosis_category", "alias": "always_planned_ccs_diagnosis_category", "checksum": {"name": "sha256", "checksum": "3ec5bc59c274f64708e2b16e9eff3db72230522289dd3f21567956d2070b3be2"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.2736812, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.always_planned_ccs_diagnosis_category"}, "seed.terminology.terminology__always_planned_ccs_procedure_category": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "always_planned_ccs_procedure_category", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__always_planned_ccs_procedure_category"], "unique_id": "seed.terminology.terminology__always_planned_ccs_procedure_category", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__always_planned_ccs_procedure_category.csv", "original_file_path": "terminology\\readmissions\\terminology__always_planned_ccs_procedure_category.csv", "name": "terminology__always_planned_ccs_procedure_category", "alias": "always_planned_ccs_procedure_category", "checksum": {"name": "sha256", "checksum": "af9918830532c9dd37924853c29502d8c9f14bbb1a380de74cfcc740b0ba48b7"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.2782843, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.always_planned_ccs_procedure_category"}, "seed.terminology.terminology__exclusion_ccs_diagnosis_category": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "exclusion_ccs_diagnosis_category", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar", "exclusion_category": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__exclusion_ccs_diagnosis_category"], "unique_id": "seed.terminology.terminology__exclusion_ccs_diagnosis_category", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__exclusion_ccs_diagnosis_category.csv", "original_file_path": "terminology\\readmissions\\terminology__exclusion_ccs_diagnosis_category.csv", "name": "terminology__exclusion_ccs_diagnosis_category", "alias": "exclusion_ccs_diagnosis_category", "checksum": {"name": "sha256", "checksum": "4bacd904ef0767100c7371e367970c9b25139aae994d3b020ceee61a7aa1e0a7"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.3234496, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.exclusion_ccs_diagnosis_category"}, "seed.terminology.terminology__icd_10_cm_to_ccs": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_cm_to_ccs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_cm": "varchar", "description": "varchar", "ccs_diagnosis_category": "varchar", "ccs_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__icd_10_cm_to_ccs"], "unique_id": "seed.terminology.terminology__icd_10_cm_to_ccs", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__icd_10_cm_to_ccs.csv", "original_file_path": "terminology\\readmissions\\terminology__icd_10_cm_to_ccs.csv", "name": "terminology__icd_10_cm_to_ccs", "alias": "icd_10_cm_to_ccs", "checksum": {"name": "path", "checksum": "terminology\\readmissions\\terminology__icd_10_cm_to_ccs.csv"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.35621, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_cm_to_ccs"}, "seed.terminology.terminology__icd_10_pcs_to_ccs": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_pcs_to_ccs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_procedure_category": "varchar", "ccs_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__icd_10_pcs_to_ccs"], "unique_id": "seed.terminology.terminology__icd_10_pcs_to_ccs", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__icd_10_pcs_to_ccs.csv", "original_file_path": "terminology\\readmissions\\terminology__icd_10_pcs_to_ccs.csv", "name": "terminology__icd_10_pcs_to_ccs", "alias": "icd_10_pcs_to_ccs", "checksum": {"name": "path", "checksum": "terminology\\readmissions\\terminology__icd_10_pcs_to_ccs.csv"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.3733883, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_pcs_to_ccs"}, "seed.terminology.terminology__potentially_planned_ccs_procedure_category": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "potentially_planned_ccs_procedure_category", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__potentially_planned_ccs_procedure_category"], "unique_id": "seed.terminology.terminology__potentially_planned_ccs_procedure_category", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__potentially_planned_ccs_procedure_category.csv", "original_file_path": "terminology\\readmissions\\terminology__potentially_planned_ccs_procedure_category.csv", "name": "terminology__potentially_planned_ccs_procedure_category", "alias": "potentially_planned_ccs_procedure_category", "checksum": {"name": "sha256", "checksum": "7b9db975327ccef9eb004256f6dac2d16248422f0c189d1c79b19826f793afd5"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.4143758, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.potentially_planned_ccs_procedure_category"}, "seed.terminology.terminology__potentially_planned_icd_10_pcs": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "potentially_planned_icd_10_pcs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__potentially_planned_icd_10_pcs"], "unique_id": "seed.terminology.terminology__potentially_planned_icd_10_pcs", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__potentially_planned_icd_10_pcs.csv", "original_file_path": "terminology\\readmissions\\terminology__potentially_planned_icd_10_pcs.csv", "name": "terminology__potentially_planned_icd_10_pcs", "alias": "potentially_planned_icd_10_pcs", "checksum": {"name": "sha256", "checksum": "d3b577c57486f9fa6d12cd8b7da4c54d8f2f6996d19d35ca169e5861f12c031f"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.418467, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.potentially_planned_icd_10_pcs"}, "seed.terminology.terminology__specialty_cohort": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "specialty_cohort", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ccs": "varchar", "description": "varchar", "specialty_cohort": "varchar", "procedure_or_diagnosis": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__specialty_cohort"], "unique_id": "seed.terminology.terminology__specialty_cohort", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__specialty_cohort.csv", "original_file_path": "terminology\\readmissions\\terminology__specialty_cohort.csv", "name": "terminology__specialty_cohort", "alias": "specialty_cohort", "checksum": {"name": "sha256", "checksum": "f4c090fe63477ea354c6a36dd54816fe76cdead723bbb39aeeba640a319c6d8d"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.4432466, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.specialty_cohort"}, "seed.terminology.terminology__surgery_gynecology_cohort": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "surgery_gynecology_cohort", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_code_and_description": "varchar", "specialty_cohort": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__surgery_gynecology_cohort"], "unique_id": "seed.terminology.terminology__surgery_gynecology_cohort", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__surgery_gynecology_cohort.csv", "original_file_path": "terminology\\readmissions\\terminology__surgery_gynecology_cohort.csv", "name": "terminology__surgery_gynecology_cohort", "alias": "surgery_gynecology_cohort", "checksum": {"name": "sha256", "checksum": "aebcfa4c5a82d3af091d8d223b26ca9349da581228f32f0d59a7754343199a58"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1670340076.4504483, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.surgery_gynecology_cohort"}}, "sources": {}, "macros": {"macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.656186}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.656186}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.656186}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.656186}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.656186}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.656186}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.656186}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.656186}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.656186}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.656186}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.656186}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.656186}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.656186}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.656186}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6634212}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6634212}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6634212}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6634212}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6634212}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6634212}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6634212}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6634212}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6634212}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6634212}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6634212}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6685026}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6685026}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6685026}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {% set  grant_config = config.get('grants') %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6733093}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6733093}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6733093}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6733093}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.678396}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.678396}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.678396}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.678396}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.678396}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.678396}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.68359}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.68359}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.68359}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6846745}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6846745}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6846745}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6846745}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6846745}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6846745}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6846745}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6846745}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6846745}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6846745}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6846745}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6846745}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6892715}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6892715}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6892715}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6892715}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6892715}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6935024}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6935024}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6935024}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6935024}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6935024}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6935024}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6935024}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6935024}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6935024}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6935024}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6985977}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6985977}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6985977}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6985977}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6985977}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.6985977}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7006874}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7006874}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7006874}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7032812}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7032812}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7032812}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7032812}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7032812}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7032812}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7032812}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7032812}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7032812}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7064013}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7064013}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7064013}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7064013}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7064013}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7064013}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7064013}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7064013}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7064013}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7064013}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7064013}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7064013}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7064013}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7064013}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7134874}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7136278}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7136278}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7136278}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7136278}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7136278}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7136278}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7136278}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7136278}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7167106}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7167106}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7167106}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7167106}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7167106}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7167106}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7167106}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7234032}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7235484}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7235484}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7235484}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7235484}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7235484}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7235484}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7235484}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7235484}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7235484}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7286353}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.readmissions.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7286353}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7286353}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7286353}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7286353}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7286353}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7286353}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7333045}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7333045}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7333045}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7333045}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7333045}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7333045}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7333045}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7333045}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.739312}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.739312}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.743319}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7479947}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7479947}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7479947}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7479947}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7479947}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7560046}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7560046}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7560046}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7560046}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7560046}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7560046}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7560046}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7560046}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7631013}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7631013}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7631013}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7631013}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7631013}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7631013}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7631013}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7631013}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7725153}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7731047}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7731047}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7731047}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7789035}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7789035}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7789035}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7789035}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7789035}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7789035}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7789035}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7789035}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7789035}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7789035}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7834072}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7895691}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7895691}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7895691}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7895691}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7895691}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7895691}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7895691}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7895691}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7895691}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.793174}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.793174}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7946775}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7946775}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.7946775}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8031797}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8031797}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8031797}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8031797}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8031797}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8061848}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8061848}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8061848}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8061848}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8106897}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8106897}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8106897}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8132842}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8132842}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8132842}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8132842}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8132842}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8132842}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8132842}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8132842}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8132842}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8132842}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8132842}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8182855}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8182855}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8182855}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8182855}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8182855}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8182855}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8182855}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8182855}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8182855}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8182855}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8182855}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8182855}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8182855}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8182855}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8227875}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8227875}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8232925}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8232925}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8232925}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8232925}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8232925}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8232925}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8232925}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8232925}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8232925}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8232925}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.826802}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8333042}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8333042}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8333042}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8333042}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8333042}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8333042}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8333042}, "macro.readmissions.default__generate_schema_name": {"unique_id": "macro.readmissions.default__generate_schema_name", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is not none -%}\r\n        {{ custom_schema_name | trim }}\r\n    {%- else -%}\r\n        {{ default_schema }}\r\n    {%- endif -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8333042}, "macro.readmissions.test_valid_values": {"unique_id": "macro.readmissions.test_valid_values", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\readmissions", "path": "macros\\valid_values_test.sql", "original_file_path": "macros\\valid_values_test.sql", "name": "test_valid_values", "macro_sql": "{% test valid_values(model, column_name, lookup_table, lookup_column) %}\r\n\r\nwith validation as (\r\nselect\r\n    {{ column_name }} as col\r\nfrom {{ model }}\r\nwhere {{ column_name }} is not null\r\n),\r\n\r\nvalidation_errors as (\r\nselect\r\n    col\r\nfrom validation aa\r\nleft join {{ lookup_table }} bb\r\n    on aa.col = bb.{{ lookup_column }}\r\nwhere bb.{{ lookup_column }} is null\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8333042}, "macro.terminology.default__generate_schema_name": {"unique_id": "macro.terminology.default__generate_schema_name", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\readmissions\\docs\\docs_generate\\dbt_packages\\terminology", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is not none -%}\n        {{ custom_schema_name | trim }}\n    {%- else -%}\n        {{ default_schema }}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1670340075.8333042}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.readmissions_input.condition": [], "model.readmissions_input.encounter": [], "model.readmissions_input.patient": [], "model.readmissions_input.procedure": [], "model.readmissions.readmissions__encounter_augmented": ["model.readmissions.readmissions__encounter_data_quality", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__index_admission", "model.readmissions.readmissions__planned_encounter", "model.readmissions.readmissions__stg_encounter"], "model.readmissions.readmissions__readmission_summary": ["model.readmissions.readmissions__encounter_augmented"], "model.readmissions.readmissions__diagnosis_ccs": ["model.readmissions.readmissions__primary_diagnosis_count", "model.readmissions.readmissions__stg_diagnosis", "seed.terminology.terminology__icd_10_cm", "seed.terminology.terminology__icd_10_cm_to_ccs"], "model.readmissions.readmissions__encounter_data_quality": ["model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__primary_diagnosis_count", "model.readmissions.readmissions__stg_encounter", "seed.terminology.terminology__discharge_disposition", "seed.terminology.terminology__ms_drg"], "model.readmissions.readmissions__encounter_overlap": ["model.readmissions.readmissions__stg_encounter"], "model.readmissions.readmissions__encounter_specialty_cohort": ["model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__procedure_ccs", "model.readmissions.readmissions__stg_encounter", "seed.terminology.terminology__specialty_cohort", "seed.terminology.terminology__specialty_cohort", "seed.terminology.terminology__specialty_cohort", "seed.terminology.terminology__specialty_cohort", "seed.terminology.terminology__specialty_cohort", "seed.terminology.terminology__surgery_gynecology_cohort"], "model.readmissions.readmissions__exclusion": ["model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__exclusion_ccs_diagnosis_category"], "model.readmissions.readmissions__index_admission": ["model.readmissions.readmissions__exclusion", "model.readmissions.readmissions__index_discharge_requirement", "model.readmissions.readmissions__index_time_requirement", "model.readmissions.readmissions__stg_encounter"], "model.readmissions.readmissions__index_discharge_requirement": ["model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter"], "model.readmissions.readmissions__index_time_requirement": ["model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter"], "model.readmissions.readmissions__planned_encounter": ["model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__procedure_ccs", "model.readmissions.readmissions__procedure_ccs", "model.readmissions.readmissions__procedure_ccs", "seed.terminology.terminology__acute_diagnosis_ccs", "seed.terminology.terminology__acute_diagnosis_icd_10_cm", "seed.terminology.terminology__always_planned_ccs_diagnosis_category", "seed.terminology.terminology__always_planned_ccs_procedure_category", "seed.terminology.terminology__potentially_planned_ccs_procedure_category", "seed.terminology.terminology__potentially_planned_icd_10_pcs"], "model.readmissions.readmissions__primary_diagnosis_count": ["model.readmissions.readmissions__stg_diagnosis", "model.readmissions.readmissions__stg_diagnosis"], "model.readmissions.readmissions__procedure_ccs": ["model.readmissions.readmissions__stg_procedure", "seed.terminology.terminology__icd_10_pcs", "seed.terminology.terminology__icd_10_pcs_to_ccs"], "model.readmissions.readmissions__readmission_crude": ["model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__stg_encounter"], "model.readmissions.readmissions__stg_diagnosis": ["model.readmissions_input.condition", "model.readmissions_input.condition"], "model.readmissions.readmissions__stg_encounter": ["model.readmissions_input.encounter", "model.readmissions_input.encounter"], "model.readmissions.readmissions__stg_patient": ["model.readmissions_input.patient", "model.readmissions_input.patient"], "model.readmissions.readmissions__stg_procedure": ["model.readmissions_input.condition", "model.readmissions_input.condition"], "seed.terminology.terminology__admit_source": [], "seed.terminology.terminology__admit_type": [], "seed.terminology.terminology__bill_type": [], "seed.terminology.terminology__chronic_conditions": [], "seed.terminology.terminology__claim_type": [], "seed.terminology.terminology__code_type": [], "seed.terminology.terminology__discharge_disposition": [], "seed.terminology.terminology__encounter_type": [], "seed.terminology.terminology__ethnicity": [], "seed.terminology.terminology__fips_county": [], "seed.terminology.terminology__fips_state": [], "seed.terminology.terminology__gender": [], "seed.terminology.terminology__hcpcs_level_2": [], "seed.terminology.terminology__icd_10_cm": [], "seed.terminology.terminology__icd_10_pcs": [], "seed.terminology.terminology__mdc": [], "seed.terminology.terminology__medicare_dual_eligibility": [], "seed.terminology.terminology__medicare_state_fips": [], "seed.terminology.terminology__medicare_status": [], "seed.terminology.terminology__ms_drg": [], "seed.terminology.terminology__payer_type": [], "seed.terminology.terminology__place_of_service": [], "seed.terminology.terminology__present_on_admission": [], "seed.terminology.terminology__race": [], "seed.terminology.terminology__revenue_center": [], "seed.terminology.terminology__acute_diagnosis_ccs": [], "seed.terminology.terminology__acute_diagnosis_icd_10_cm": [], "seed.terminology.terminology__always_planned_ccs_diagnosis_category": [], "seed.terminology.terminology__always_planned_ccs_procedure_category": [], "seed.terminology.terminology__exclusion_ccs_diagnosis_category": [], "seed.terminology.terminology__icd_10_cm_to_ccs": [], "seed.terminology.terminology__icd_10_pcs_to_ccs": [], "seed.terminology.terminology__potentially_planned_ccs_procedure_category": [], "seed.terminology.terminology__potentially_planned_icd_10_pcs": [], "seed.terminology.terminology__specialty_cohort": [], "seed.terminology.terminology__surgery_gynecology_cohort": []}, "child_map": {"model.readmissions_input.condition": ["model.readmissions.readmissions__stg_diagnosis", "model.readmissions.readmissions__stg_diagnosis", "model.readmissions.readmissions__stg_procedure", "model.readmissions.readmissions__stg_procedure"], "model.readmissions_input.encounter": ["model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter"], "model.readmissions_input.patient": ["model.readmissions.readmissions__stg_patient", "model.readmissions.readmissions__stg_patient"], "model.readmissions_input.procedure": [], "model.readmissions.readmissions__encounter_augmented": ["model.readmissions.readmissions__readmission_summary"], "model.readmissions.readmissions__readmission_summary": [], "model.readmissions.readmissions__diagnosis_ccs": ["model.readmissions.readmissions__encounter_data_quality", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__exclusion", "model.readmissions.readmissions__planned_encounter", "model.readmissions.readmissions__planned_encounter"], "model.readmissions.readmissions__encounter_data_quality": ["model.readmissions.readmissions__encounter_augmented"], "model.readmissions.readmissions__encounter_overlap": ["model.readmissions.readmissions__encounter_data_quality", "model.readmissions.readmissions__encounter_data_quality", "model.readmissions.readmissions__readmission_crude", "model.readmissions.readmissions__readmission_crude"], "model.readmissions.readmissions__encounter_specialty_cohort": ["model.readmissions.readmissions__encounter_augmented"], "model.readmissions.readmissions__exclusion": ["model.readmissions.readmissions__index_admission"], "model.readmissions.readmissions__index_admission": ["model.readmissions.readmissions__encounter_augmented"], "model.readmissions.readmissions__index_discharge_requirement": ["model.readmissions.readmissions__index_admission"], "model.readmissions.readmissions__index_time_requirement": ["model.readmissions.readmissions__index_admission"], "model.readmissions.readmissions__planned_encounter": ["model.readmissions.readmissions__encounter_augmented"], "model.readmissions.readmissions__primary_diagnosis_count": ["model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__encounter_data_quality"], "model.readmissions.readmissions__procedure_ccs": ["model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__planned_encounter", "model.readmissions.readmissions__planned_encounter", "model.readmissions.readmissions__planned_encounter"], "model.readmissions.readmissions__readmission_crude": [], "model.readmissions.readmissions__stg_diagnosis": ["model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__primary_diagnosis_count", "model.readmissions.readmissions__primary_diagnosis_count"], "model.readmissions.readmissions__stg_encounter": ["model.readmissions.readmissions__encounter_augmented", "model.readmissions.readmissions__encounter_data_quality", "model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__index_admission", "model.readmissions.readmissions__index_discharge_requirement", "model.readmissions.readmissions__index_discharge_requirement", "model.readmissions.readmissions__index_discharge_requirement", "model.readmissions.readmissions__index_discharge_requirement", "model.readmissions.readmissions__index_time_requirement", "model.readmissions.readmissions__index_time_requirement", "model.readmissions.readmissions__readmission_crude"], "model.readmissions.readmissions__stg_patient": [], "model.readmissions.readmissions__stg_procedure": ["model.readmissions.readmissions__procedure_ccs"], "seed.terminology.terminology__admit_source": [], "seed.terminology.terminology__admit_type": [], "seed.terminology.terminology__bill_type": [], "seed.terminology.terminology__chronic_conditions": [], "seed.terminology.terminology__claim_type": [], "seed.terminology.terminology__code_type": [], "seed.terminology.terminology__discharge_disposition": ["model.readmissions.readmissions__encounter_data_quality"], "seed.terminology.terminology__encounter_type": [], "seed.terminology.terminology__ethnicity": [], "seed.terminology.terminology__fips_county": [], "seed.terminology.terminology__fips_state": [], "seed.terminology.terminology__gender": [], "seed.terminology.terminology__hcpcs_level_2": [], "seed.terminology.terminology__icd_10_cm": ["model.readmissions.readmissions__diagnosis_ccs"], "seed.terminology.terminology__icd_10_pcs": ["model.readmissions.readmissions__procedure_ccs"], "seed.terminology.terminology__mdc": [], "seed.terminology.terminology__medicare_dual_eligibility": [], "seed.terminology.terminology__medicare_state_fips": [], "seed.terminology.terminology__medicare_status": [], "seed.terminology.terminology__ms_drg": ["model.readmissions.readmissions__encounter_data_quality"], "seed.terminology.terminology__payer_type": [], "seed.terminology.terminology__place_of_service": [], "seed.terminology.terminology__present_on_admission": [], "seed.terminology.terminology__race": [], "seed.terminology.terminology__revenue_center": [], "seed.terminology.terminology__acute_diagnosis_ccs": ["model.readmissions.readmissions__planned_encounter"], "seed.terminology.terminology__acute_diagnosis_icd_10_cm": ["model.readmissions.readmissions__planned_encounter"], "seed.terminology.terminology__always_planned_ccs_diagnosis_category": ["model.readmissions.readmissions__planned_encounter"], "seed.terminology.terminology__always_planned_ccs_procedure_category": ["model.readmissions.readmissions__planned_encounter"], "seed.terminology.terminology__exclusion_ccs_diagnosis_category": ["model.readmissions.readmissions__exclusion"], "seed.terminology.terminology__icd_10_cm_to_ccs": ["model.readmissions.readmissions__diagnosis_ccs"], "seed.terminology.terminology__icd_10_pcs_to_ccs": ["model.readmissions.readmissions__procedure_ccs"], "seed.terminology.terminology__potentially_planned_ccs_procedure_category": ["model.readmissions.readmissions__planned_encounter"], "seed.terminology.terminology__potentially_planned_icd_10_pcs": ["model.readmissions.readmissions__planned_encounter"], "seed.terminology.terminology__specialty_cohort": ["model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_specialty_cohort"], "seed.terminology.terminology__surgery_gynecology_cohort": ["model.readmissions.readmissions__encounter_specialty_cohort"]}}